<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jvm | Blog Of ZK]]></title>
  <link href="http://ttazk.github.io/blog/categories/jvm/atom.xml" rel="self"/>
  <link href="http://ttazk.github.io/"/>
  <updated>2017-04-07T14:08:03+08:00</updated>
  <id>http://ttazk.github.io/</id>
  <author>
    <name><![CDATA[Z K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[虚拟机类加载机制]]></title>
    <link href="http://ttazk.github.io/blog/2017/02/09/jvm2/"/>
    <updated>2017-02-09T22:55:40+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/02/09/jvm2</id>
    <content type="html"><![CDATA[<ul>
<li>类的生命周期包括：加载&ndash;>连接&ndash;>初始化&ndash;>使用&ndash;>卸载，其中连接包括，验证&ndash;>准备&ndash;>解析。</li>
<li>虚拟机把描述类的数据从Class文件中加载到内存，并对数据进行校验，转换，解析和初始化，最终形成可被虚拟机直接使用的Java类型。</li>
<li>在Java中，类的加载，连接，初始化都是在运行期间完成的，这种策略与C++等不同，但是这也实现了Java语言的运行期动态加载与动态连接的特点。</li>
</ul>


<!--more-->


<h2>类加载的过程：</h2>

<ol>
<li>加载</li>
<li>加载是类加载的一个阶段。在加载时需要 完成以下几件事情：

<ol>
<li>通过类的全限定名称获取此类的二进制字节流</li>
<li>将这个字节流所带表的静态存储结构转换为方法区的运行时数据结构</li>
<li>在内存中生成代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
</li>
<li>二进制字节流可以从Class文件中获取，也可以从网络中或者其他文件中获取。</li>
<li>在加载阶段完成后，虚拟机外部的二进制字节流就转换为方法区中的数据结构，然后再在内存中实例化一个java.lang.Class对象，作为程序访问方法区中这些数据类型的接口。</li>
<li>验证

<ul>
<li>为了确保Class文件中的字节流所包含的信息是符合当前虚拟机的要求。</li>
</ul>
</li>
<li>准备</li>
<li>准备阶段是正式为类变量设置初始值的阶段。这些变量所用的内存都将在方法区中分配。</li>
<li>此时仅分配类变量，不包括实例变量。实例变量会随着对象实例化一起在Java堆中分配。</li>
<li>这里说的初始值是数据的零值，null/false/0等。</li>
<li>解析</li>
<li>将常量池中的符号引用替换为直接引用。</li>
<li>初始化</li>
<li>在这个阶段，才是对类变量进行赋值操作。按照程序的主观计划去初始化类变量及其他资源。</li>
<li>初始化是执行类构造器<clinit>()方法的过程，<clinit>()方法是由编译器自动收集类中所有类变量的赋值动作与静态语句块（static{}）中的语句合并。</li>
<li>类构造器<clinit>()方法与类的构造函数（实例构造器<init>()方法）不同，它不需要显示地调用父类构造器，虚拟机会保证在子类的<clinit>()方法执行之前，父类的<clinit>()方法已经执行完毕。因此虚拟机中第一个被执行的<clinit>()方法的类肯定是java.lang.Object。</li>
<li>由于父类的<clinit>()方法先执行，因此父类中定义的静态语句块要优先于子类的静态语句块。</li>
<li>对于类来说并不是必须的，如果类中没有类变量，也没有静态语句块，那么便不需要<clinit>()方法。</li>
<li>如果多个线程同时初始化一个类，那么只有一个线程会执行<clinit>()方法，其他线程阻塞等待。</li>
</ol>


<h2>虚拟机规范中严格定义了有且只有5中情况必须立即对类进行初始化（加载，验证，准备需要在此之前完成）</h2>

<ol>
<li>遇到new,getstatic,putstatic或者invokestatic这4条字节码指令时，如果类没有进行初始化，则需要对它进行初始化。生成这4条字节码指令的Java代码是：使用new关键字实例化对象，读取或者设置一个类的静态字段（被final修饰，已经在编译期就把结果放到常量池的静态字段除外），以及调用一个类的静态方法的时候。</li>
<li>使用java.lang.reflect包中的方法对类进行反射调用的时候，如果类没有进行初始化，则需初始化。</li>
<li>当初始化一个类的时候（注意是类，不是对象），如果发现父类没有被初始化，则先初始化其父类。</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法），虚拟机会先初始化这个主类。</li>
<li>当使用jdk1.7的动态语言支持时，如果一个方法解析后句柄对应的类没有初始化，则先初始化。</li>
</ol>


<p>//当调用类中普通的静态变量时（没有被final修饰的），会对类进行初始化</p>

<pre><code>public class InvokeStatic {
public static int a=1;
static{
     System.out.println("the class has been init !");
}
public static void main(String[] args) {
     // TODO Auto-generated method stub
     int i=InvokeStatic.a;
}
}

输出结果为：
the class has been init !
</code></pre>

<p>//当初始化一个类的时候，如果发现父类还没有初始化，便先将其父类进行初始化</p>

<pre><code>class Super{
static{
     System.out.println("The super has been init !");
}
}
public class InvokeChildStatic extends Super {
static int a=10;
static{
     System.out.println("The child has been init !");
}
public static void main(String[] args) {
     // TODO Auto-generated method stub
     System.out.println(InvokeChildStatic.a);
}
}
输出结果为：
The super has been init !
The child has been init !
10
</code></pre>

<h2>上面介绍的是对类进行加载及初始化，下面要介绍的是对象的创建：</h2>

<ul>
<li>当虚拟机遇到一个new指令时，首先检查这个指令的参数能否在常量池中定位一个符号引用，并且检查这个符号引用代表的类是否被加载，如果没有，便先加载这个类。</li>
<li>类加载完成之后，虚拟机为新生对象在Java堆中分配内存（对象所需的内存大小在类加载完成后便确定）。</li>
<li>接下来，虚拟机将分配的内存空间都初始化为零值（保证了实例字段在Java代码中可以不赋初值就能使用）。</li>
<li>执行实例构造器<init>()方法，把对象按照程序员的意愿初始化。这样一个对象便创建完成。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚拟机内存分配]]></title>
    <link href="http://ttazk.github.io/blog/2017/02/08/jvm1/"/>
    <updated>2017-02-08T15:51:45+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/02/08/jvm1</id>
    <content type="html"><![CDATA[<p>Java运行时数据区分为：方法区，堆，虚拟机栈，本地方法栈，程序计数器。其中，方法区与堆为所有线程共享；虚拟机栈，本地方法栈与程序计数器为线程私有。</p>

<h2>程序计数器：</h2>

<ol>
<li>所占内存空间比较小，可以看做当前线程所执行字节码的行号指数器。字节码解释器在工作时就是通过这个计数器的值来选取下一条需要执行的字节码指令。</li>
<li>每个线程都有一个独立的程序计数器，各个线程的程序计数器互不影响，独立存储，为“线程私有”。</li>
<li>如果线程正在执行的是Java方法，那么程序计数器的值就是虚拟机字节码指令的地址；如果执行的是Native方法，那么程序计数器的值为空。</li>
<li>此内存区域是Java虚拟机运行规范中没有规定任何OutOfMemoryError情况的区域。</li>
</ol>


<!--more-->


<h2>Java虚拟机栈：</h2>

<ol>
<li>与程序计数器一样，也是线程私有，它的生命周期与线程一样。</li>
<li>Java虚拟机栈描述的是Java方法执行时的内存模型：每一个方法在执行时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等信息。</li>
<li>局部变量表存放了在编译期可知的各种基本数据类型（int,short,long,double,float,boolean），对象引用类型（reference类型，可能指向对象起始地址的指针）和returnAddress类型（指向一条字节码指令的地址）。</li>
<li>局部变量表的内存大小在编译期确定并完成分配，当进入一个方法时，这个方法需要在帧中分配的局部变量表的大小确定，并且在运行期不改变。</li>
<li>Java虚拟机栈的内存大小是可以动态扩展的，在这个区域可能会发生两种异常：OutOfMemoryError与StackOverflowError。</li>
</ol>


<h2>本地方法栈：</h2>

<ol>
<li>与虚拟机栈的作用类似，只不过虚拟机栈是为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈是为虚拟机使用到的Native方法服务。有的虚拟机（如HotSpot）直接把这两个合二为一。</li>
<li>在这个区域可能会发生两种异常：OutOfMemoryError与StackOverflowError，与虚拟机栈相同。</li>
</ol>


<h2>Java堆：</h2>

<ol>
<li>Java堆是Java虚拟机所管理的内存最大的一块区域。</li>
<li>Java堆是所有线程共享的一块区域，随着虚拟机的启动而创建。此区域的唯一目的就是存放对象的实例，几乎所有的对象实例都在这里分配内存。Java虚拟机规范描述的是：所有的对象实例及数组都在堆上分配。</li>
<li>Java堆是垃圾收集器管理的主要区域。</li>
<li>Java堆可以处在物理上连续的内存空间中，也可以处于不连续的内存空间中（只要是逻辑上连续即可）。在实现时，可以是固定大小的，也可以是可扩展的。</li>
<li>当堆中没有内存完成实例分配时，且堆也无法扩展时，可能会发生的异常为：OutOfMemoryError。</li>
</ol>


<h2>方法区：</h2>

<ol>
<li>方法区与Java堆一样也是线程共享的，它用于存储已被虚拟机加载的类信息，常量，静态变量，即编译器编译后的代码（如被final static修饰，会在编译结束后放在常量池中）等数据。</li>
<li>除了与Java堆一样可以不需要连续的内存，可以选择固定的大小或可扩展的外，还可以选择不实现垃圾收集。相对而言，垃圾收集在这里的行为很少（这一区域的回收主要是对常量池的回收和对类型的卸载）。</li>
<li>当内存无法满足要求时，会抛出：OutOfMemoryError。</li>
</ol>


<h2>运行时常量池：</h2>

<ol>
<li>运行时常量池是方法区的一部分，Class文件中除了有类的版本，字段，方法，接口等描述信息外，还包括一项信息是常量池。</li>
<li>常量池用于存放编译期生成的各种字面量和符号引用。</li>
<li><p>字面量和符号引用量：字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：</p>

<pre><code>    * 类和接口的全限定名
    * 字段名称和描述符
    * 方法名称和描述符
</code></pre></li>
<li><p>运行时常量池相对于CLass文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入CLass文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。</p></li>
<li>java中基本类型的包装类的大部分都实现了常量池技术，即（Byte,Short,Integer,Long,Character,Boolean）。类比于Integer类型在自动装箱时，如果值[-128,127]之间，那么就存储在常量池中。两种浮点数类型的包装类Float,Double并没有实现常量池技术。</li>
<li>只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</li>
<li>对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</li>
</ol>


<p>*</p>

<pre><code>     String string1="te";
     String string2="st";
     String string3="test";
     String string4=string1+string2;
     String string5="te"+"st";
     String string6=new StringBuilder("test").toString();
 　　String string7=new String("test").intern();


    System.out.println(string3==string4);//false
    System.out.println(string3==string5);//true
    System.out.println(string4==string5);//false
    System.out.println(string3==string6);//false
    System.out.println(string3==string7);//true
</code></pre>

<p>　　 <br/>
*</p>
]]></content>
  </entry>
  
</feed>
