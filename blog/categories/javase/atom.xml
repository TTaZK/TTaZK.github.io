<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javase | ZK]]></title>
  <link href="http://ttazk.github.io/blog/categories/javase/atom.xml" rel="self"/>
  <link href="http://ttazk.github.io/"/>
  <updated>2017-09-07T22:16:46+08:00</updated>
  <id>http://ttazk.github.io/</id>
  <author>
    <name><![CDATA[Z K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HashMap及源码分析]]></title>
    <link href="http://ttazk.github.io/blog/2017/08/29/hashmap/"/>
    <updated>2017-08-29T22:01:20+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/08/29/hashmap</id>
    <content type="html"><![CDATA[<h3>映射</h3>

<ul>
<li><p>映射用来存放键值对。如果提供了键，就可以查找到对应的值。</p>

<ul>
<li>Java类库为映射提供了两种通用的实现：<strong>TreeMap，HashMap</strong>。它们都实现了Map接口。</li>
<li>散列映射对键进行散列。树映射用键的整体顺序对元素进行排序，并将其组织成搜索树。散列或比较函数只能作用于键，与键关联的值不能进行散列或比较。散列要比树快点。</li>
<li>每当往映射中添加对象时，必须同时提供一个键。想要检索一个对象也必须使用键。</li>
<li><p><strong>键必须是唯一的，不能对同一个键存放两个值</strong>。如果对同一个键两次调用put，第二个值就会取代第一个值。实际上，put 将返回用这个键参数存储的上一个值。</p>

<pre><code>  V getOrDefault(Object key,V defaultValue)
  获得与键关联的值，或者如果未在映射中找到这个键，则返回defaultValue.
  V put(K key,V value)
  将键值对插入，并返回键对应的旧值。如果这个键以前没有出现过，则返回null。
  键可以为null,但值不可以为null。
</code></pre></li>
</ul>
</li>
<li><p>映射视图是实现了Collection接口或者其子接口的对象。有三种视图：<strong><em>键集(Set<K> keySet)，值集合(Collection<V> values)，键值对集(Set&lt;Map.Entry&lt;K,V>> entrySet)</em></strong>。需要说明的是，keySet不是hashSet或TreeSet，而是实现了Set接口的另外某个类的对象。
      <table>
      <tr>
      <td>public interface Map&lt;K,V><br></td>
      <td>将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值</td>
      </tr>
      <tr>
      <td>Set(Map.Entry&lt;K,V>) entrySet()</td>
      <td>返回此映射中包含的映射关系的 Set 视图。该 set 受映射支持，所以对映射的更改可在此 set 中反映出来，反之亦然。如果对该 set 进行迭代的同时修改了映射（通过迭代器自己的 remove 操作，或者通过对迭代器返回的映射项执行 setValue 操作除外），则迭代结果是不确定的。<strong><em>set 支持元素移除，通过 Iterator.remove、Set.remove、removeAll、retainAll 和 clear 操作可从映射中移除相应的映射关系。它不支持 add 或 addAll 操作</em></strong>。</td>
      </tr>
      <tr>
      <td>Set<K> keySet()</td>
      <td>返回此映射中包含的键的 Set 视图。该 set 受映射支持，所以对映射的更改可在此 set 中反映出来，反之亦然。如果对该 set 进行迭代的同时修改了映射（通过迭代器自己的 remove 操作除外），则迭代结果是不确定的。<strong><em>set 支持元素移除，通过 Iterator.remove、Set.remove、removeAll、retainAll 和 clear 操作可从映射中移除相应的映射关系。它不支持 add 或 addAll 操作。</em></strong></td>
      </tr>
      <tr>
      <td>Collection<V> values()</td>
      <td>返回此映射中包含的值的 Collection 视图。该 collection 受映射支持，所以对映射的更改可在此 collection 中反映出来，反之亦然。如果对该 collection 进行迭代的同时修改了映射（通过迭代器自己的 remove 操作除外），则迭代结果是不确定的。<strong><em>collection 支持元素移除，通过 Iterator.remove、Collection.remove、removeAll、retainAll 和 clear 操作可从映射中移除相应的映射关系。它不支持 add 或 addAll 操作。</em></strong></td>
      </tr>
      </table></p>

<ul>
<li>如果在视图上调用迭代器的remove()方法，实际上会从映射中删除键值对。不过不能向视图中增加元素。</li>
</ul>
</li>
</ul>


<h3>HashMap</h3>

<h4>HashMap类</h4>

<table>
<tr>
<td>
public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable
</td>
</tr>
</table>


<ul>
<li>基于哈希表的 Map 接口的实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。（除了非同步和允许使用 null 之外，HashMap 类与 Hashtable 大致相同。）此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</li>
<li>此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（get 和 put）提供稳定的性能。迭代 collection 视图所需的时间与 HashMap 实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。<br/></li>
<li>HashMap 的实例有两个参数影响其性能：初始容量 和加载因子。容量 是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。<br/></li>
<li>通常，默认加载因子 (.75) 在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。<br/></li>
<li>如果很多映射关系要存储在 HashMap 实例中，则相对于按需执行自动的 rehash 操作以增大表的容量来说，使用足够大的初始容量创建它将使得映射关系能更有效地存储。<br/>

<ul>
<li>注意，此实现不是同步的。如果多个线程同时访问一个哈希映射，而其中至少一个线程从结构上修改了该映射，则它必须 保持外部同步。（结构上的修改是指添加或删除一个或多个映射关系的任何操作；仅改变与实例已经包含的键关联的值不是结构上的修改。）这一般通过对自然封装该映射的对象进行同步操作来完成。如果不存在这样的对象，则应该使用 Collections.synchronizedMap 方法来“包装”该映射。最好在创建时完成这一操作，以防止对映射进行意外的非同步访问，如下所示：<br>
Map m = Collections.synchronizedMap(new HashMap(&hellip;));</li>
</ul>
</li>
<li>由所有此类的“collection 视图方法”所返回的迭代器都是快速失败 的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的 remove 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不冒在将来不确定的时间发生任意不确定行为的风险。<br/>

<ul>
<li>注意，迭代器的快速失败行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 ConcurrentModificationException。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。

<h4>HashMap源码</h4></li>
</ul>
</li>
<li><p>HashMap中的属性</p>

<pre><code>  private static final long serialVersionUID = 362498820763181265L;
  //默认的初始容量，16        
  static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16
  //最大容量
  static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;
  //装载因子
  static final float DEFAULT_LOAD_FACTOR = 0.75f;
  static final int TREEIFY_THRESHOLD = 8;
  static final int UNTREEIFY_THRESHOLD = 6;
  static final int MIN_TREEIFY_CAPACITY = 64;

  //存储Entry的table数组
  transient Node&lt;K,V&gt;[] table;
  transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;
  //map中保存的键值对的数量
  transient int size;
  //map结构被改变的次数
  transient int modCount;
  //需要调整大小的极限值（容量*装载因子）
  int threshold;
  //装载因子
  final float loadFactor;
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串讲解]]></title>
    <link href="http://ttazk.github.io/blog/2017/08/05/string/"/>
    <updated>2017-08-05T17:21:04+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/08/05/string</id>
    <content type="html"><![CDATA[<ul>
<li>String类没有提供用于修改字符串的方法。<strong><em>String类对象为不可变字符串</em></strong>，如字符串string=&ldquo;HELLO"永远只包含HELLO这几个字母，而不能修改其中任何一个字符。当然可以修改字符串变量string的引用，让它引用另一个字符串。</li>
<li><p>不可变字符串有一个优点：<strong><em>编译器可以让字符串实现共享</em></strong>。实际上只有字符串常量（使用“ ”声明，存储在字符串常量池中）是共享的，subStrng,+等操作产生的结果不能共享。（</p>

<ul>
<li>具体见JVM笔记</li>
<li>（1）只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</li>
<li>（2）对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。）</li>
</ul>
</li>
<li><p>比较字符串值是否相等时使用equals()方法，不能使用==，==比较的是字符串的地址是否相同。如果字符串在常量池中，可以使用==比较，因为指向的都是同一个字符串。</p></li>
<li><p><strong><em>直接使用 &ldquo; &rdquo; 声明的String对象会直接存储在常量池中</em></strong>，（可以实现共享）</p>

<ul>
<li>1.String str1=&ldquo;first&rdquo;;
 jvm在运行时先查找常量池中是否有该字符串，如果有则直接返回该字符串的引用给first(实现了字符串     的共享) ；否则先在常量池中创建该字符串并返回引用。
 <strong><em>此时只会在常量池中创建String对象，不会在堆中创建。</em></strong></li>
<li>2.String str2=new String(&ldquo;second&rdquo;);
 该代码生成了两个String对象。因为使用了<strong><em>“”会先在常量池中查找是否存在second对象</em></strong>，没有则创建
 否则不创建；在常量池创建完成后，由于<strong><em>使用了new，jvm会在堆中创建内容相同的String对象</em></strong>，并将引用返回给str2.</li>
<li>3.String str3=&ldquo;what&rdquo;; String str4=str3+&ldquo;a nice day&rdquo;;
 运行时，+ 相当于new，所以堆中会有“what a nice day”对象；常量池中会有"what" &ldquo;a nice day"两个对象，而不会有"what a nice day”对象。</li>
</ul>
</li>
</ul>


<!-- more -->


<pre><code>        package String;
        public class String_1 {
            public static void main(String[] args) {
                 //string1,string2都指向常量池中的同一个字符串first
                 //所以引用相同，值也相同
                 String string1="first";
                 String string2="first";
                 System.out.println(string1==string2);
                System.out.println(string1.equals(string2));

                 //string3指向常量池中的字符串second
                 //string4指向堆中的字符串second
                 //所以值相同，引用不同
                 String string3="second";
                 String string4=new String("second");
                 System.out.println(string3==string4);
                System.out.println(string3.equals(string4));

                 //string5指向常量池中的字符串third
                 //string6一开始指向堆中的字符串third,但是调用intern()方法之后，且该方法调用时先检查常量池中是否有值为string6
                 //的字符串，如果有则返回该字符串的引用，否则在常量池中创建该字符串，并返回引用
                 //所以一开始引用不相等，后来相等
                 String string5="third";
                 String string6=new String("third");
                 System.out.println(string5==string6);
                 string6=string6.intern();
                 System.out.println(string5==string6);
            }
        }
</code></pre>

<ul>
<li>关于常量池分为运行时常量池与静态常量池，具体详解查看JVM笔记

<ul>
<li>所谓<strong><em>静态常量池</em></strong>，即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串（数字）字面量，还包括类、方法的信息，占用class文件绝大部分空间。</li>
<li><p>而<strong><em>运行时常量池</em></strong>，则是JVM虚拟机在完成类装载操作后，将class文件中的常量池载入带内存中，并保存在方法区中，我们常说的常量池就是指方法区中的运行时常量池。<strong><em>运行时常量池中的常量，基本来源于各个class文件中的常量池。程序运行时，除非手动向常量池中添加常量（比如调用intern方法），否则JVM不会自动添加常量到常量池。</em></strong></p>

<pre><code>        String string1="te";
        String string2="st";
        String string3="test";
        String string4=string1+string2;
        String string5="te"+"st";
        String string6=new StringBuilder("test").toString();
        String string7=new String("test").intern(); 
        System.out.println(string3==string4);//false
        System.out.println(string3==string5);//true
        System.out.println(string4==string5);//false
        System.out.println(string3==string6);//false
    　　System.out.println(string3==string7);//true
</code></pre></li>
</ul>
</li>
</ul>


<p>以上所讲仅涉及字符串常量池，实际上还有整型常量池、浮点型常量池等等，但都大同小异，<strong><em>只不过数值类型的常量池不可以手动添加常量，程序启动时常量池中的常量就已经确定了，比如整型常量池中的常量范围：-128~127，只有合格范围的数字可以用到常量池。</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[枚举类型]]></title>
    <link href="http://ttazk.github.io/blog/2017/08/05/enum/"/>
    <updated>2017-08-05T16:59:07+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/08/05/enum</id>
    <content type="html"><![CDATA[<ul>
<li>所有的枚举类型都是Enum类的子类，枚举类型包括有限个命名的值。枚举类型的变量只能存储该类型中指定的枚举常量，或者null值。</li>
<li>枚举类型在定义时，可以添加指定的域，方法或者构造函数；当然构造函数为private，只是在声明枚举常量时调用，用于传递值。</li>
<li><p>枚举类型可以简单定义为：</p>

<pre><code>  enum Size{
           //枚举常量列表必须写在前面，否则编译出错
           Small,Mid,Larger,SuperLager;  
      }
</code></pre></li>
<li><p>也可以给枚举类型增加构造方法，然后每个枚举类型的值通过构造函数传入对应的参数</p>

<pre><code>  enum Size_1{ 
           //定义枚举常量，并利用构造函数传递值,
          Small("1"),Mid("2"),Larger("3"),SuperLarger("4");
           //定义私有变量
           private String size;
           //定义构造函数，类型为private，用于给枚举常量传递值
           private Size_1(String size){
               this.size=size;
           }
           //重写toString()方法，用于返回枚举常量的值
           @Override
           public String toString() {
               // TODO Auto-generated method stub
               return this.size;
           }

      }
</code></pre></li>
<li>完整代码及具体使用如下：</li>
</ul>


<!-- more -->


<pre><code>    package Enum;
    public class Enum_Test {
        enum Size{
             //枚举常量列表必须写在前面，否则编译出错
             Small,Mid,Larger,SuperLager;  
        }
        enum Size_1{
             //定义枚举常量，并利用构造函数传递值,
            Small("1"),Mid("2"),Larger("3"),SuperLarger("4");
             //定义私有变量
             private String size;
             //定义构造函数，类型为private，用于给枚举常量传递值
             private Size_1(String size){
                 this.size=size;
             }
             //重写toString()方法，用于返回枚举常量的值
             @Override
             public String toString() {
                 // TODO Auto-generated method stub
                 return this.size;
             }

        }
        public static void main(String[] args) {
             // TODO Auto-generated method stub
             Size size=Size.Larger;
             String string=size.toString();//默认toString()方法用于返回枚举常量名
             System.out.println(string);
             //toString()的逆方法是valueOf(),即根据给定的常量名，返回对应的枚举变量
             Size size2=Enum.valueOf(Size.class, "Larger");
             System.out.println(size==size2);//比较两个枚举类型的值时，直接使用==，不需要使用equals();

             Size_1 size_1=Size_1.Larger;
             String string2=size_1.toString();//返回枚举常量的值
             System.out.println(string2);
             Size_1[] size_2=Size_1.values();//values()返回包含全部枚举常量的数组
             System.out.println(size_2[1]);

            System.out.println(size_1.ordinal());//ordinal()方法返回枚举常量的位置
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java代理]]></title>
    <link href="http://ttazk.github.io/blog/2017/06/04/proxy/"/>
    <updated>2017-06-04T15:51:47+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/06/04/proxy</id>
    <content type="html"><![CDATA[<ul>
<li>代理（Proxy）:利用代理可以在运行时创建一个实现了一组给定接口的新类。</li>
<li>代理类可以在运行时创建全新的类，这样的代理类能够实现指定的接口，代理类具有的方法如下：

<ul>
<li>指定接口所需要的全部方法。</li>
<li>Object类中的全部方法，（所有的代理类都覆盖了Object类中的方法toString,equals,hashCode,其他方法如，clone,getClass没有重新定义）</li>
<li><p>然而，不能在运行时定义这些方法的代码，而是要提供一个调用处理器(invocation Handler)。调用处理器是实现了InvocationHandler接口的类对象，在这个接口中只有一个方法：</p>

<pre><code>  Object invoke(Object proxy,Method method,Object[] args)
</code></pre></li>
</ul>
</li>
<li>无论何时调用代理对象的任何方法，调用处理器的invoke（）方法都会被调用，并向其传递Method对象和原始的调用参数。调用处理器必须给出处理调用的方式。</li>
</ul>


<!--  more -->


<h3>创建代理对象</h3>

<ul>
<li><p>需要使用Proxy类的newProxyInstance方法，该方法有三个参数</p>

<ul>
<li>一个类加载器(class loader)。对于预定义类使用null作为默认的类加载器，对于自定义的接口，使用：myInterface.class.getClassLoader()(其中myInterface为要实现的接口)</li>
<li>一个class对象数组，每个元素都是要实现的接口。</li>
<li>一个调用处理器。</li>
</ul>
</li>
<li><p>简单示例如下：</p>

<pre><code>  interface  Proxy1{
      public void print();
  }
  class ImpHandler implements InvocationHandler{

      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
          // TODO Auto-generated method stub
           System.out.println("Invoke invoke() method");
           String string="return String";
          return string;
      }

  }
  public class ProxyTest {

      public static void main(String[] args) {
           // TODO Auto-generated method stub
           InvocationHandler invocationHandler=new ImpHandler();
           Object proxy=Proxy.newProxyInstance(Proxy1.class.getClassLoader(), new Class[]{Proxy1.class}, invocationHandler);
           proxy.toString();
      }
  }
  输出结果为：
  Invoke invoke() method
</code></pre></li>
<li><p>代理对象属于在运行时定义的类。没有定义代理类的名字（所以在创建代理对象时，将返回的引用传递给Object变量），sun虚拟机中的Proxy类将生成一个以字符串$Proxy开头的类名，如$proxy0.</p>

<h3>代理类的特性</h3></li>
<li>代理类是在程序运行时创建的，然而一旦创建，就变成了常规类，与其他类没有区别。</li>
<li>所有的代理类都扩展于Proxy类。一个代理类只有一个实例域&mdash;调用处理器，它定义在Proxy的父类中。为了履行代理对象的职责，所需要的任何附加数据都必须存储在调用处理器中。</li>
<li>所有的代理类中的方法仅仅调用了调用处理器的invoke()方法。</li>
<li>对于特定的类加载器与预设的一组接口来说，只能有一个代理类。也就是说，如果使用同一个类加载器和接口数组调用两次newProxyInstance()方法的话，那么只能得到同一个类的两个对象。</li>
<li><p>可以调用Proxy类的getProxyClass方法获取实现指定接口的代理类：</p>

<pre><code>  static Class&lt;?&gt; getProxyClass(classLoader,interfaces)
</code></pre></li>
<li>代理类一定是public final。如果代理类实现的所有接口都是public,代理类就不属于某个特定的包；否则所有的非公有接口都必须属于同一个包，同时代理类也属于这个包。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[B树，B+树，B*树简介]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/22/btree/"/>
    <updated>2017-04-22T11:30:13+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/22/btree</id>
    <content type="html"><![CDATA[<ul>
<li><h3>B树又叫平衡多路查找树（Balance-Tree)，一棵m阶B树满足以下条件：</h3>

<ul>
<li>每个节点至多有m棵子树</li>
<li>除根节点外，其他节点至少有|m/2|棵子树</li>
<li>根节点至少有两棵子树（除非B树只有一个节点）</li>
<li>所有的叶子节点位于同一层上。B树的叶子节点可以看做一种外部节点，不包含任何信息。</li>
<li>有j个孩子的非叶子节点恰好有（j-1）个关键字，关键字按照递增的次序排列。</li>
<li>对于一棵包含N个关键字，高度为h，最小度数t>=2的B树，有h&lt;=logt（(N+1)/2）
</br></br></li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><h3>B+树：</h3>

<ul>
<li>B+树是应文件系统所需而产生的B树的变形。</li>
<li><p>m阶B+树与m阶B树的异同点：</p>

<ul>
<li>有n棵子树的节点中包含n-1个关键字。（同）</li>
<li>所有的叶子节点中包含了全部的关键字信息，以及指向这些关键字记录的指针，且叶子节点本身依关键字大小顺序连接。（B树的叶子节点并没有包含全部需要查找的信息）</li>
<li>所有的非终端节点可以看做是索引部分，节点中仅含有其子树根节点中最大（或最小）关键字。（而B树的非终端节点中页也包含需要查找的信息）</li>
</ul>
</li>
<li><p>总的来说B+树与B树的区别是：B树所有节点都包含查找的信息（类似于二叉查找树），对于要查找的关键字key，最终查找的节点可能是叶子节点，也可能是非叶子节点；B+树中只有叶子节点包含要查找的信息，非叶子节点只是作为一种索引帮助找到叶子节点的位置，对于要查找的关键字key，最终只能在叶子节点中查找到。</p></li>
<li>为什么说B+树比B树更适合实际应用中操作系统的文件索引与数据库索引？

<ul>
<li><p>B+树磁盘读写代价更低</p>

<ul>
<li>B+-tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了</li>
<li>举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。</li>
</ul>
</li>
<li><p>B+树的查询效率更稳定</p>

<ul>
<li>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p></br></br></p>

<ul>
<li><h3>B*树：</h3>

<ul>
<li>B<em>-tree是B+ Tree的变体，在B+树的基础上(所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针)，B</em>树中非根和非叶子结点再增加指向兄弟的指针。
</br></br></li>
</ul>
</li>
<li><h3>总结：</h3>

<ul>
<li>B树：有序数组+平衡多叉树。</li>
<li>B+树：有序数组链表+平衡多叉树。</li>
<li>B*数：一棵丰满的B+树。</li>
<li>B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。</li>
<li> B+树中只有叶子节点会带有指向记录的指针（ROWID），而B树则所有节点都带有，在内部节点出现的索引项不会再出现在叶子节点中。B+树中所有叶子节点都是通过指针连接在一起，而B树不会。</li>
<li><p>B+树的优点：</p>

<ul>
<li><ol>
<li>非叶子节点不会带上ROWID，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</li>
</ol>
</li>
<li><ol>
<li>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</li>
</ol>
</li>
</ul>
</li>
<li><p>B树的优点：</p>

<ul>
<li>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
