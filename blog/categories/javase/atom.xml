<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javase | ZK]]></title>
  <link href="http://ttazk.github.io/blog/categories/javase/atom.xml" rel="self"/>
  <link href="http://ttazk.github.io/"/>
  <updated>2017-06-04T18:13:31+08:00</updated>
  <id>http://ttazk.github.io/</id>
  <author>
    <name><![CDATA[Z K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java代理]]></title>
    <link href="http://ttazk.github.io/blog/2017/06/04/proxy/"/>
    <updated>2017-06-04T15:51:47+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/06/04/proxy</id>
    <content type="html"><![CDATA[<ul>
<li>代理（Proxy）:利用代理可以在运行时创建一个实现了一组给定接口的新类。</li>
<li>代理类可以在运行时创建全新的类，这样的代理类能够实现指定的接口，代理类具有的方法如下：

<ul>
<li>指定接口所需要的全部方法。</li>
<li>Object类中的全部方法，（所有的代理类都覆盖了Object类中的方法toString,equals,hashCode,其他方法如，clone,getClass没有重新定义）</li>
<li><p>然而，不能在运行时定义这些方法的代码，而是要提供一个调用处理器(invocation Handler)。调用处理器是实现了InvocationHandler接口的类对象，在这个接口中只有一个方法：</p>

<pre><code>  Object invoke(Object proxy,Method method,Object[] args)
</code></pre></li>
</ul>
</li>
<li>无论何时调用代理对象的任何方法，调用处理器的invoke（）方法都会被调用，并向其传递Method对象和原始的调用参数。调用处理器必须给出处理调用的方式。</li>
</ul>


<!--  more -->


<h3>创建代理对象</h3>

<ul>
<li><p>需要使用Proxy类的newProxyInstance方法，该方法有三个参数</p>

<ul>
<li>一个类加载器(class loader)。对于预定义类使用null作为默认的类加载器，对于自定义的接口，使用：myInterface.class.getClassLoader()(其中myInterface为要实现的接口)</li>
<li>一个class对象数组，每个元素都是要实现的接口。</li>
<li>一个调用处理器。</li>
</ul>
</li>
<li><p>简单示例如下：</p>

<pre><code>  interface  Proxy1{
      public void print();
  }
  class ImpHandler implements InvocationHandler{

      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
          // TODO Auto-generated method stub
           System.out.println("Invoke invoke() method");
           String string="return String";
          return string;
      }

  }
  public class ProxyTest {

      public static void main(String[] args) {
           // TODO Auto-generated method stub
           InvocationHandler invocationHandler=new ImpHandler();
           Object proxy=Proxy.newProxyInstance(Proxy1.class.getClassLoader(), new Class[]{Proxy1.class}, invocationHandler);
           proxy.toString();
      }
  }
  输出结果为：
  Invoke invoke() method
</code></pre></li>
<li><p>代理对象属于在运行时定义的类。没有定义代理类的名字（所以在创建代理对象时，将返回的引用传递给Object变量），sun虚拟机中的Proxy类将生成一个以字符串$Proxy开头的类名，如$proxy0.</p>

<h3>代理类的特性</h3></li>
<li>代理类是在程序运行时创建的，然而一旦创建，就变成了常规类，与其他类没有区别。</li>
<li>所有的代理类都扩展于Proxy类。一个代理类只有一个实例域&mdash;调用处理器，它定义在Proxy的父类中。为了履行代理对象的职责，所需要的任何附加数据都必须存储在调用处理器中。</li>
<li>所有的代理类中的方法仅仅调用了调用处理器的invoke()方法。</li>
<li>对于特定的类加载器与预设的一组接口来说，只能有一个代理类。也就是说，如果使用同一个类加载器和接口数组调用两次newProxyInstance()方法的话，那么只能得到同一个类的两个对象。</li>
<li><p>可以调用Proxy类的getProxyClass方法获取实现指定接口的代理类：</p>

<pre><code>  static Class&lt;?&gt; getProxyClass(classLoader,interfaces)
</code></pre></li>
<li>代理类一定是public final。如果代理类实现的所有接口都是public,代理类就不属于某个特定的包；否则所有的非公有接口都必须属于同一个包，同时代理类也属于这个包。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[B树，B+树，B*树简介]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/22/btree/"/>
    <updated>2017-04-22T11:30:13+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/22/btree</id>
    <content type="html"><![CDATA[<ul>
<li><h3>B树又叫平衡多路查找树（Balance-Tree)，一棵m阶B树满足以下条件：</h3>

<ul>
<li>每个节点至多有m棵子树</li>
<li>除根节点外，其他节点至少有|m/2|棵子树</li>
<li>根节点至少有两棵子树（除非B树只有一个节点）</li>
<li>所有的叶子节点位于同一层上。B树的叶子节点可以看做一种外部节点，不包含任何信息。</li>
<li>有j个孩子的非叶子节点恰好有（j-1）个关键字，关键字按照递增的次序排列。</li>
<li>对于一棵包含N个关键字，高度为h，最小度数t>=2的B树，有h&lt;=logt（(N+1)/2）
</br></br></li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><h3>B+树：</h3>

<ul>
<li>B+树是应文件系统所需而产生的B树的变形。</li>
<li><p>m阶B+树与m阶B树的异同点：</p>

<ul>
<li>有n棵子树的节点中包含n-1个关键字。（同）</li>
<li>所有的叶子节点中包含了全部的关键字信息，以及指向这些关键字记录的指针，且叶子节点本身依关键字大小顺序连接。（B树的叶子节点并没有包含全部需要查找的信息）</li>
<li>所有的非终端节点可以看做是索引部分，节点中仅含有其子树根节点中最大（或最小）关键字。（而B树的非终端节点中页也包含需要查找的信息）</li>
</ul>
</li>
<li><p>总的来说B+树与B树的区别是：B树所有节点都包含查找的信息（类似于二叉查找树），对于要查找的关键字key，最终查找的节点可能是叶子节点，也可能是非叶子节点；B+树中只有叶子节点包含要查找的信息，非叶子节点只是作为一种索引帮助找到叶子节点的位置，对于要查找的关键字key，最终只能在叶子节点中查找到。</p></li>
<li>为什么说B+树比B树更适合实际应用中操作系统的文件索引与数据库索引？

<ul>
<li><p>B+树磁盘读写代价更低</p>

<ul>
<li>B+-tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了</li>
<li>举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。</li>
</ul>
</li>
<li><p>B+树的查询效率更稳定</p>

<ul>
<li>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p></br></br></p>

<ul>
<li><h3>B*树：</h3>

<ul>
<li>B<em>-tree是B+ Tree的变体，在B+树的基础上(所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针)，B</em>树中非根和非叶子结点再增加指向兄弟的指针。
</br></br></li>
</ul>
</li>
<li><h3>总结：</h3>

<ul>
<li>B树：有序数组+平衡多叉树。</li>
<li>B+树：有序数组链表+平衡多叉树。</li>
<li>B*数：一棵丰满的B+树。</li>
<li>B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。</li>
<li> B+树中只有叶子节点会带有指向记录的指针（ROWID），而B树则所有节点都带有，在内部节点出现的索引项不会再出现在叶子节点中。B+树中所有叶子节点都是通过指针连接在一起，而B树不会。</li>
<li><p>B+树的优点：</p>

<ul>
<li><ol>
<li>非叶子节点不会带上ROWID，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</li>
</ol>
</li>
<li><ol>
<li>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</li>
</ol>
</li>
</ul>
</li>
<li><p>B树的优点：</p>

<ul>
<li>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object详解]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/19/object/"/>
    <updated>2017-04-19T20:07:37+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/19/object</id>
    <content type="html"><![CDATA[<ul>
<li>Object类是所有类的父类，每个类都是由Object类扩展而来。如果没有明确指出父类，则默认为Object类为该类的父类。</li>
<li>可以使用Object类型的变量引用任何类型的对象。</li>
<li><p>在Java中，只有基本数据类型（数字，字符，布尔）不是对象。所有的数组类型，不管是对象数组还是基本类型的数组都扩展了Object类。</p>

<pre><code>  int[] i=new int[5];
  Object obj=i;
</code></pre>

<h3>equals()方法</h3></li>
<li>在Object类中，该方法用于判断两个对象是否具有相同的引用。</li>
<li><p>然而，经常需要检测两个对象的状态的相等性，所以一般需要覆写equals()方法。</p>

<pre><code>  public class Test{
             public boolean equals(Object otherObject){
                  }
         }
</code></pre></li>
<li>在子类中定义equals方法时，首先调用父类的equals方法。如果检测失败，则对象不可能相等。如果父类中的域都相等，就需要比较子类中的实例域。</li>
</ul>


<!--  more -->


<pre><code>         public class Test{
                   public boolean equals(Object otherObject){
                   if(!super.equals(otherObject)) return false;
                    //接着比较子类中扩展的实例域    
                   }
               }        
</code></pre>

<ul>
<li><p>Java规范要求equals方法具有下面的特性：</p>

<ul>
<li>自反性：对于非空引用 x,x.equals(x)应该返回true.</li>
<li>对称性：如果x.equals(y)返回true,则y.equals(x)也应该返回true</li>
<li>传递性：x.equals(y)返回true,y.equals(z)返回true，则x.equals(z)返回true</li>
<li>一致性：如果x,y引用的对象没有发生改变，反复调用x.equals(y)返回相同的结果</li>
<li>对于非空引用x，x.equals(null)应该返回false.<br/><br/></li>
</ul>
</li>
<li><p>编写equals方法的步骤：</p>

<ul>
<li>显式参数命名为otherObject，稍后需将它转换成叫做other的变量</li>
<li><p>检测this与otherObject是否引用同一个对象</p>

<pre><code>  if(this==otherObject)
  return true;
</code></pre></li>
<li><p>检测otherObject是否为null，如果为null，则返回false</p>

<pre><code>   if(otherObject==null)  
   return false;
</code></pre></li>
<li><p>比较this与otherObject是否属于同一个类</p>

<pre><code>  if(this.getClass!==otherObject.getClass)  
  return false;
</code></pre></li>
<li><p>将otherObject转换为相应的类类型变量</p>

<pre><code>   ClassName other=(ClassName)otherObject
</code></pre></li>
<li><p>对所有需要比较的域进行比较。使用==比较基本类型域，使用equals比较对象域。如果所有的域都匹配则返回true,否则返回false.</p>

<pre><code>  return field1==other.field&amp;&amp;Objects.equals(field,other.field)
</code></pre>

<br/><br/>

<h3>hashCode()方法</h3></li>
</ul>
</li>
<li>散列码(hash code)是由对象导出的一个整型值（可以是负数）。散列码没有规律，两个不同对象的散列码基本不同。</li>
<li>在Object类中，hashCode()方法的返回值默认为对象的存储地址。</li>
<li><p>String类型重写了hashCode()方法，字符串的散列码是由内容导出的。计算过程如下：</p>

<pre><code>        int hash=0;
        for(int i=0;i&lt;length();i++){
             hash=31*hash+charAt(i);
        }
        //String str1="string";  String str2=new String("string");
        //str1,str2的散列码值相同，因为其内容相同。
</code></pre></li>
<li>如果重新定义equals()方法，就必须重新定义hashCode()方法，以便用户可以将对象插入到散列表中。equals()方法与hashCode()方法的定义必须一致：如果x.equals(y)返回true,那么x.hashCode()的值必须与y.hashCode()值相等。</li>
<li><p>如果存在数组类型的域，可以使用静态的Arrays.hashCode()方法计算一个散列码，这个散列码由数组元素的散列码组成。</p>

<pre><code>  static int hashCode(type[] a)//数组类型可以是任意类型
</code></pre>

<br/><br/>

<h3>toString()方法</h3></li>
<li>该方法用于返回表示对象值的字符串。</li>
<li>Object类中的toString()方法返回对象所属的类名及散列码。</li>
<li>只要将对象与一个字符串通过"+&ldquo;相连，Java编译器就会自动调用toString()方法，以便获得这个对象的字符串表示。</li>
<li>大部分类覆写了toString()方法，返回值为：类的名字，随后是一对方括号括起来的域值。</li>
<li><p>数组类型继承了Object类的toString方法，如果直接输出数组，如：int[] arr={1,2,3};，会生成字符串：类型+hashCode。如果想要输出[1,2,3]，则需调用Arrays.toString()方法。</p>

<pre><code>      static String toString(type[] a)            
</code></pre>

<br/><br/>

<h3>getClass()方法</h3></li>
<li>返回此 Object 的运行时类。返回的 Class 对象是由所表示类的 static synchronized 方法锁定的对象
<br/><br/>

<h3>protected Object clone()</h3></li>
<li>创建并返回此对象的一个副本。“副本”的准确含义可能依赖于对象的类。这样做的目的是，对于任何对象 x表达式： x.clone() != x 为 true，表达式： x.clone().getClass() == x.getClass()也为 true，但这些并非必须要满足的要求。</li>
<li>一般情况下： x.clone().equals(x)为 true，但这并非必须要满足的要求。</li>
<li>按照惯例，返回的对象应该通过调用 super.clone 获得。如果一个类及其所有的超类（Object 除外）都遵守此约定，则 x.clone().getClass() == x.getClass()。</li>
<li>按照惯例，此方法返回的对象应该独立于该对象（正被复制的对象）。要获得此独立性，在 super.clone 返回对象之前，有必要对该对象的一个或多个字段进行修改。这通常意味着要复制包含正在被复制对象的内部“深层结构”的所有可变对象，并使用对副本的引用替换对这些对象的引用。如果一个类只包含基本字段或对不变对象的引用，那么通常不需要修改 super.clone 返回的对象中的字段。</li>
<li>Object 类的 clone 方法执行特定的复制操作。首先，如果此对象的类不能实现接口 Cloneable，则会抛出 CloneNotSupportedException。注意，所有的数组都被视为实现接口 Cloneable。否则，此方法会创建此对象的类的一个新实例，并像通过分配那样，严格使用此对象相应字段的内容初始化该对象的所有字段；这些字段的内容没有被自我复制。所以，此方法执行的是该对象的“浅表复制”，而不“深层复制”操作。</li>
<li>Object 类本身不实现接口 Cloneable，所以在类为 Object 的对象上调用 clone 方法将会导致在运行时抛出异常。
<br/><br/>

<h3>public final void notify()</h3></li>
<li>唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。</li>
<li>直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。</li>
<li>此方法只应由作为此对象监视器的所有者的线程来调用。通过以下三种方法之一，线程可以成为此对象监视器的所有者：

<ul>
<li>通过执行此对象的同步实例方法。</li>
<li>通过执行在此对象上进行同步的 synchronized 语句的正文。</li>
<li>对于 Class 类型的对象，可以通过执行该类的同步静态方法。</li>
</ul>
</li>
<li>一次只能有一个线程拥有对象的监视器。
<br/><br/>

<h3>public final void wait(long timeout)</h3></li>
<li>此方法导致当前线程（称之为 T）将其自身放置在对象的等待集中，然后放弃此对象上的所有同步要求。出于线程调度目的，在发生以下四种情况之一前，线程 T 被禁用，且处于休眠状态：

<ul>
<li>其他某个线程调用此对象的 notify 方法，并且线程 T 碰巧被任选为被唤醒的线程。</li>
<li>其他某个线程调用此对象的 notifyAll 方法。</li>
<li>其他某个线程中断线程 T。</li>
<li>大约已经到达指定的实际时间。但是，如果 timeout 为零，则不考虑实际时间，在获得通知前该线程将一直等待。</li>
</ul>
</li>
<li>然后，从对象的等待集中删除线程 T，并重新进行线程调度。然后，该线程以常规方式与其他线程竞争，以获得在该对象上同步的权利；一旦获得对该对象的控制权，该对象上的所有其同步声明都将被恢复到以前的状态，这就是调用 wait 方法时的情况。然后，线程 T 从 wait 方法的调用中返回。所以，从 wait 方法返回时，该对象和线程 T 的同步状态与调用 wait 方法时的情况完全相同
<br/><br/>

<h3>protected void finalize()</h3></li>
<li>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。子类重写 finalize 方法，以配置系统资源或执行其他清除。</li>
</ul>


<h3>protected void finalize() throws Throwable</h3>

<ul>
<li>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。子类重写 finalize 方法，以配置系统资源或执行其他清除。</li>
<li>finalize 的常规协定是：当 JavaTM 虚拟机已确定尚未终止的任何线程无法再通过任何方法访问此对象时，将调用此方法，除非由于准备终止的其他某个对象或类的终结操作执行了某个操作。finalize 方法可以采取任何操作，其中包括再次使此对象对其他线程可用；不过，finalize 的主要目的是在不可撤消地丢弃对象之前执行清除操作。例如，表示输入/输出连接的对象的 finalize 方法可执行显式 I/O 事务，以便在永久丢弃对象之前中断连接。</li>
<li>Object 类的 finalize 方法执行非特殊性操作；它仅执行一些常规返回。Object 的子类可以重写此定义。</li>
<li>Java 编程语言不保证哪个线程将调用某个给定对象的 finalize 方法。但可以保证在调用 finalize 时，调用 finalize 的线程将不会持有任何用户可见的同步锁定。如果 finalize 方法抛出未捕获的异常，那么该异常将被忽略，并且该对象的终结操作将终止。</li>
<li>在启用某个对象的 finalize 方法后，将不会执行进一步操作，直到 Java 虚拟机再次确定尚未终止的任何线程无法再通过任何方法访问此对象，其中包括由准备终止的其他对象或类执行的可能操作，在执行该操作时，对象可能被丢弃。</li>
<li>对于任何给定对象，Java 虚拟机最多只调用一次 finalize 方法。</li>
<li>finalize 方法抛出的任何异常都会导致此对象的终结操作停止，但可以通过其他方法忽略它。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程池详解]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/11/threadpool/"/>
    <updated>2017-04-11T21:00:36+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/11/threadpool</id>
    <content type="html"><![CDATA[<ul>
<li>线程池是管理一组同构线程的资源池。线程池与工作队列密切相关，其中在工作队列中保存了所有等待执行的任务。<strong>工作者线程的任务是：从工作队列中取出一个任务，执行任务，然后返回线程等待下一个任务。线程池通过重用线程，而不是新建线程，减小线程创建与销毁的开销</strong>。</li>
<li>Excutor是顶级线程池接口</li>
<li>ExecutorService是真正的线程池接口。</li>
<li>Executors类提供了一些静态工厂用于生成一些常用的线程池，当将一个任务添加到线程池时，线程池会为每个任务创建一个线程，该线程会在某个时刻执行。</li>
</ul>


<!--  more -->


<p> <strong>public class Executors extends Object</strong></p>

<pre><code>public static ExecutorService newCachedThreadPool()
空闲线程会被保留60秒。对于每个任务，如果有空闲线程可用，立即让它执行任务；如果没有空闲的线程，则创建一个新的线程。

public static ExecutorService newFixedThreadPool(int nThreads)
构建一个具有固定大小的线程池。如果提交的任务大于空闲的线程数，则把任务放置到队列中。

public static ExecutorService newSingleThreadExecutor()
 线程数目为1的线程池，由一个线程执行提交的任务，一个接一个。
</code></pre>

<ul>
<li>为了解决执行服务的生命周期问题，ExecutorService扩展了Executor接口，添加了一些用于生命周期管理的方法。</li>
<li><strong>ExecutorService的生命周期有三种：运行，关闭，已终止。ExecutorService在初始创建时处于运行状态。shutdowm方法将执行平缓的关闭过程：不再接受新的任务，同时等待已经提交的任务的完成&mdash;包括那写还没有开始执行的任务。shutdownNow方法将执行粗暴的关闭过程：它将取消所有运行中的任务，并且不再启动队列中尚未开始的任务。在ExecutorService关闭后提交的任务将由“拒绝处理执行器 ”来处理，它会抛弃任务，或者使得execute()方法抛出一个未检查异常。等到所有的任务完成后，ExecutorService进入终止状态。</strong></li>
</ul>


<p><strong>public interface ExecutorService extends Executor</strong></p>

<p>Executor 提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。
可以关闭 ExecutorService，这将导致其拒绝新任务。提供两个方法来关闭 ExecutorService。shutdown() 方法在终止前允许执行以前提交的任务，而 shutdownNow() 方法阻止等待任务启动并试图停止当前正在执行的任务。在终止时，执行程序没有任务在执行，也没有任务在等待执行，并且无法提交新任务。应该关闭未使用的 ExecutorService 以允许回收其资源。</p>

<p>通过创建并返回一个可用于取消执行和/或等待完成的 Future，方法 submit 扩展了基本方法 Executor.execute(java.lang.Runnable)。方法 invokeAny 和 invokeAll 是批量执行的最常用形式，它们执行任务 collection，然后等待至少一个，或全部任务完成（可使用 ExecutorCompletionService 类来编写这些方法的自定义变体）。</p>

<pre><code>    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)
    提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。该 Future 的 get 方法在成功完成时将会返回该任务的结果。

    &lt;T&gt; Future&lt;T&gt; submit(Runnable task,
                         T result)
    提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功完成时将会返回给定的结果。

    Future&lt;?&gt; submit(Runnable task)
    提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功 完成时将会返回 null。

    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
                              throws InterruptedException
    执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 Future.isDone() 为 true。注意，可以正常地或通过抛出异常来终止已完成 任务。如果正在进行此操作时修改了给定的 collection，则此方法的结果是不确定的。

    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
               throws InterruptedException,
                       ExecutionException
    执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。一旦正常或异常返回后，则取消尚未完成的任务。如果此操作正在进行时修改了给定的 collection，则此方法的结果是不确定的。

    void shutdown()
    启动一次顺序关闭，执行以前提交的任务，但不接受新任务。如果已经关闭，则调用没有其他作用。

    List&lt;Runnable&gt;  shutdownNow()
    试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。 无法保证能够停止正在处理的活动执行任务，但是会尽力尝试。例如，通过 Thread.interrupt() 来取消典型的实现，所以任何任务无法响应中断都可能永远无法终止。

    boolean isShutdown()
    如果此执行程序已关闭，则返回 true。

    boolean isTerminated()
    如果关闭后所有任务都已完成，则返回 true。注意，除非首先调用 shutdown 或 shutdownNow，否则 isTerminated 永不为 true。
</code></pre>

<ul>
<li><p>Runnable封装了一个异步运行的任务，可以把它想象为一个没有参数和返回值的方法。Callable与Runnable类似，但是有返回值。</p>

<pre><code>    public interface Callable&lt;V&gt;{
         v call() throws Exception;  
    }
</code></pre></li>
</ul>


<p><strong>public interface Future<V></strong></p>

<p>Future 表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并获取计算的结果。计算完成后只能使用 get 方法来获取结果，如有必要，计算完成前可以阻塞此方法。取消则由 cancel 方法来执行。还提供了其他方法，以确定任务是正常完成还是被取消了。一旦计算完成，就不能再取消计算。如果为了可取消性而使用 Future 但又不提供可用的结果，则可以声明 Future&lt;?> 形式类型、并返回 null 作为底层任务的结果。</p>

<p>用法示例（注意，下列各类都是构造好的。）</p>

<pre><code>    interface ArchiveSearcher { String search(String target); }
    class App {
      ExecutorService executor = ...
      ArchiveSearcher searcher = ...
      void showSearch(final String target)
          throws InterruptedException {
        Future&lt;String&gt; future
          = executor.submit(new Callable&lt;String&gt;() {
            public String call() {
                return searcher.search(target);
            }});
        displayOtherThings(); // do other things while searching
        try {
          displayText(future.get()); // use future
        } catch (ExecutionException ex) { cleanup(); return; }
      }
    }
</code></pre>

<ul>
<li><p>FutureTask 类是 Future 的一个实现，Future 可实现 Runnable，所以可通过 Executor 来执行。例如，可用下列内容替换上面带有 submit 的构造：</p>

<pre><code>  FutureTask&lt;String&gt; future =
    new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() {
      public String call() {
        return searcher.search(target);
    }});
  executor.execute(future);
</code></pre>

<p>Future的方法：</p>

<pre><code>  boolean cancel(boolean mayInterruptIfRunning)
  试图取消对此任务的执行。如果任务已完成、或已取消，或者由于某些其他原因而无法取消，则此尝试将失败。当调用 cancel 时，如果调用成功，而此任务尚未启动，则此任务将永不运行。如果任务已经启动，则 mayInterruptIfRunning 参数确定是否应该以试图停止任务的方式来中断执行此任务的线程。
  此方法返回后，对 isDone() 的后续调用将始终返回 true。如果此方法返回 true，则对 isCancelled() 的后续调用将始终返回 true。

  boolean isCancelled()
  如果在任务正常完成前将其取消，则返回 true。

  boolean isDone()
  如果任务已完成，则返回 true。 可能由于正常终止、异常或取消而完成，在所有这些情况中，此方法都将返回 true。

  V get()    throws InterruptedException,
              ExecutionException
  如有必要，等待计算完成，然后获取其结果。
  get方法调用被阻塞，直到计算完成。

  V get(long timeout,
        TimeUnit unit)
        throws InterruptedException,
              ExecutionException,
              TimeoutException
  如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用）。
  get方法调用被阻塞，直到计算完成，如果在计算完成之前超时，将抛出TimeoutExecption异常。
</code></pre></li>
</ul>


<p><strong>public class FutureTask<V> extends Object implements</strong> <strong>RunnableFuture<V> ,Runnable,Future<V></strong></p>

<ul>
<li>可取消的异步计算。利用开始和取消计算的方法、查询计算是否完成的方法和获取计算结果的方法，此类提供了对 Future 的基本实现。仅在计算完成时才能获取结果；如果计算尚未完成，则阻塞 get 方法。一旦计算完成，就不能再重新开始或取消计算。</li>
<li><p>可使用 FutureTask 包装 Callable 或 Runnable 对象。因为 FutureTask 实现了 Runnable，所以可将 FutureTask 提交给 Executor 执行。</p>

<pre><code>  public FutureTask(Callable&lt;V&gt; callable)
  创建一个 FutureTask，一旦运行就执行给定的 Callable。

  public FutureTask(Runnable runnable,
                    V result)
  创建一个 FutureTask，一旦运行就执行给定的 Runnable，并安排成功完成时 get 返回给定的结果 。
</code></pre></li>
<li><p>使用连接池应该做的事：</p>

<ul>
<li>调用Executors类中的静态方法newCachedThreadPool或newFixedThreadPool。</li>
<li>调用submit()提交Runnable/Callable对象，会得到一个Future对象，可以用来查询该任务的状态。</li>
<li><p>当不想提交任务时，调用shutDowm。</p>

<pre><code>  class ThreadTest implements Runnable {
      public synchronized void run() {
           for (int i = 0; i &lt; 5; i++) {
               System.out.print(i+" ");
           }
           System.out.println();
      }
  }

  public class ThreadPoolTest {

      public static void main(String[] args) {
           // TODO Auto-generated method stub
           ExecutorService executorService=Executors.newCachedThreadPool();
           ThreadTest thread=new ThreadTest();
           for(int i=0;i&lt;10;i++){
               executorService.execute(thread);
           }
           executorService.shutdown();
      }
  }
</code></pre></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[泛型程序设计]]></title>
    <link href="http://ttazk.github.io/blog/2017/03/22/generic/"/>
    <updated>2017-03-22T14:06:10+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/03/22/generic</id>
    <content type="html"><![CDATA[<ul>
<li>泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。</li>
<li><p>在增加泛型之前，泛型程序是利用继承实现的。</p>

<pre><code>  public class ArrayList{
  private Object[] data;
   ...
  public Object get(int i){}
  public void add(Object o){}
  }
</code></pre></li>
<li>这种方法有两个问题：</li>
<li>1.当获取一个值时必须进行强制类型转换。</li>
<li><p>2.没有错误检查，可以向数组列表中添加任何类的对象。</br></br></p></li>
<li><p>泛型提供了一个更好的解决方法：类型参数，用来指示存储元素的类型。如：ArrayList<String> arl=new ArrayList&lt;>();   (jdk1.7之后，构造函数中可以省略泛型类型)。</p>

<ul>
<li>对此编译器可以进行检查，避免插入错误的类型，同时在获取对象时不需要进行强制类型转换。</li>
<li><p>一个泛型类(generic class)就是具有一个或多个类型变量的类。
      public class Pair<T> {
      private T first;
      private T second;</p>

<pre><code>  public Pair(){
       this.first=null;
       this.second=null;
  }
  public Pair(T first,T second){
       this.first=first;
       this.second=second;
  }

  public T getFirst(){
       return first;
  }
  public T getSecond(){
       return second;
  }
  public void setFirst(T first){
       this.first=first;
  }
  public void setSecond(T second){
       this.second=second;
      }
  }
</code></pre></li>
<li>如上所示，Pair类引入了一个类型变量T,用&lt;>括起来，并放在类名之后。泛型类可以有多个类型变量。例如可以定义Pair类，两个域分别使用不同的类型变量：public class Pair&lt;T,V>{&hellip;}.</li>
<li>类中定义的泛型变量指定方法的返回类型，以及域和局部变量的类型。（一般来说，K,V分别表示关键字与值的类型，T表示任意类型）。</li>
<li>用具体的类型替换类型变量就可以实例化泛型类型，如Pair<String>。换句话来说，泛型类可以看做普通类的工厂。
</br></br></li>
</ul>
</li>
</ul>


<!--more-->


<h3>* 泛型方法</h3>

<ul>
<li><p>可以在一个普通类中定义一个带有类型参数的简单方法。</p>

<pre><code>public class Generic {
public static &lt;T&gt; void print(T t){
System.out.println(t);
    }
}
</code></pre></li>
<li><p>注意：类型变量放在修饰符的后面，返回类型的前面。</p></li>
<li>泛型方法可以定义在普通类中，也可以定义在泛型类中。</li>
<li><p>当调用一个泛型方法时，可以在方法名前的&lt;>中放入具体的类型，也可以省略&lt;>类型参数。</p>

<pre><code>Generic.print("no");
Generic.&lt;String&gt;print("nothing");
</code></pre></li>
</ul>


<h3>* 类型变量的限定</h3>

<ul>
<li><p>有时，需要对类或泛型方法中的类型变量加以限定。</p>

<pre><code>      public static &lt;T extends Comparable&gt; void sys(T t){
       System.out.println(t);
      }
</code></pre></li>
<li>可以对泛型变量T进行限定，将其限定为实现了Comparable接口的类。</li>
<li><T extends BoundingType> 表示：T应该是绑定类型的子类型。T和绑定类型可以是类，也可以是接口。</li>
<li>一个类型变量或通配符可以有多个限定，如：T extends Comaprable &amp; Serializable</li>
<li>在Java的继承中，可以根据需要有多个接口的父类型，但是限定中至多只能有一个类，且必须是限定列表中的第一个。</li>
</ul>


<h3>* 类型擦除</h3>

<ul>
<li>在虚拟机中，没有泛型类型对象&mdash;-所有的对象都属于普通类。</li>
<li>无论何时定义一个泛型类型，都会自动提供一个相应的原始类型(raw type)。原始类型的名字就是删去类型参数后的泛型类型名。擦除类型变量，并替换为限定类型（没有限定类型就用Object）。</li>
<li><p>例如，Pair<T>的原始类型为：
      public class Pair{
      private Object first;
      private Object second;</p>

<pre><code>  public Pair(){
       this.first=null;
       this.second=null;
  }
  public Pair(Object first,Object second){
       this.first=first;
       this.second=second;
  }

  public Object getFirst(){
       return first;
  }
  public Object getSecond(){
       return second;
  }
  public void setFirst(Object first){
       this.first=first;
  }
  public void setSecond(Object second){
       this.second=second;
  }
  }
</code></pre></li>
<li><p>在程序中可以包含不同类型的Pair，如Pair<String>,Pair<LocalDate>，但是类型擦除后就变成了原始的Pair类型了。</p></li>
<li>原始类型用第一个限定类型来替换参数变量，如果没有给定限定类型，就用Object替换。</li>
<li>为了提高效率，应该将标签接口(没有方法的接口)放在列表的末尾。</li>
</ul>


<h3>* 翻译泛型表达式</h3>

<ul>
<li><p>当程序调用泛型方法时，如果擦除返回类型，编译器则插入强制类型转换。</p>

<pre><code>  Pair&lt;Employee&gt; p=new Pair&lt;&gt;();
  Employee e=p.getFirst();//先对原始方法调用Pair.getFirst();再将返回的Object类型强制转换成Employee类型。
</code></pre></li>
<li>关于java泛型转换的事实：

<ul>
<li>虚拟机中没有泛型，只有普通的类与方法。</li>
<li>所有的参数类型都用它们的限定类型进行替换。</li>
<li>为了保持类型安全，必要时插入强制类型转换。</li>
<li>桥方法被合成来保持多态。</li>
</ul>
</li>
</ul>


<h3>* 约束与局限性(大多数限制都是由类型擦除引起的)</h3>

<h5>* 不能用基本类型实例化类型参数</h5>

<ul>
<li>因此没有Pair<double>，只有Pair<Double>。原因是类型擦除，擦除之后，Pair类含有Object域，而Object域不能存储基本类型。

<h5>* 运行时类型查询只适用于原始类型</h5></li>
<li><p>虚拟机中的对象总有一个特定的非泛型类型，因此，所有的类型查询只产生原始类型。</p>

<pre><code>  Pair&lt;String&gt; pair=new Pair&lt;String&gt;();
  if (pair instanceof Pair&lt;String&gt;) {    //error
     System.out.println(true);
  } 
  if (pair instanceof Pair) {         //true
  System.out.println(true);
  }
</code></pre></li>
<li><p>同样，getClass()方法返回的是原始类型。</p>

<pre><code>  Pair&lt;String&gt; pair=new Pair&lt;String&gt;();
  Pair&lt;Double&gt; pair2=new Pair&lt;Double&gt;();
  if (pair.getClass()==pair2.getClass()) {
  System.out.println(true);
  }         //输出为true
</code></pre></li>
</ul>


<h5>* 不能创建泛型数组</h5>

<pre><code>Pair&lt;String&gt;[] pairs=new Pair&lt;String&gt;[10];  //error
</code></pre>

<ul>
<li>只是不能创建这些数组，但是声明类型Pair<String>[] 的变量仍是合法的，只能不过不能初始化。</li>
<li>原因也是类型擦除。</li>
</ul>


<h5>* 不能实例化类型变量</h5>

<ul>
<li>即不能使用new T(&hellip;),new T[&hellip;],或T.class这样的表达式中的类型变量。

<h5>* 不能创建类型变量数组</h5>

  private T[] ts=new T[2];   //error

<h5>* 不能在静态域或静态方法中引用类型变量</h5>

  private static T t;   //error
  public static T print(){}   //error
</br>

<h3>* 泛型类型的继承规则</h3></li>
<li>考虑一个类与一个子类，如Object,String，那么Pair<String>是Pair<Object>的子类吗？不是</li>
<li>无论T和V有什么关系，通常Pair<V>,Pair<T>是没有任何关系的。
Pair<Object>[] pair3=new Pair<String>[10];  //error</li>
<li>注意泛型与Java数组之间的区别：可以将子类数组的变量赋给父类数组变量。
Object[] objects=new String[10];</li>
<li>永远可以将参数化类型转换为一个原始类型。
Pair pair3=new Pair<String>();</li>
<li>泛型类可以扩展或者实现其他泛型类，这点而言与普通类没有区别</li>
<li>ArrayList<T>类实现了List<T>接口。</li>
<li>意味着ArrayList<String>可以转换为List<String></li>
</ul>


<h3>* 通配符类型</h3>

<ul>
<li>通配符类型中，允许类型参数变化。如  Pair&lt;? extends Comparable></li>
<li><p>类型Pair<String>是Pair&lt;? extends Object>的子类型。                                                                                        &lt;&mdash;Pair<Object>
Pair(原始类型)&lt;&mdash;Pair&lt;? extends Object><---
                  <---Pair<String></p></li>
<li><p>通配符的超类型限定</p></li>
<li>可以指定一个父类型：  ? super Manager</li>
<li>带有超类型限定的通配符可以向泛型对象写入，带有子类型限定的通配符可以从泛型对象读取。(P332)</li>
</ul>

]]></content>
  </entry>
  
</feed>
