<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javase | ZK]]></title>
  <link href="http://ttazk.github.io/blog/categories/javase/atom.xml" rel="self"/>
  <link href="http://ttazk.github.io/"/>
  <updated>2017-08-23T23:21:04+08:00</updated>
  <id>http://ttazk.github.io/</id>
  <author>
    <name><![CDATA[Z K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字符串讲解]]></title>
    <link href="http://ttazk.github.io/blog/2017/08/05/string/"/>
    <updated>2017-08-05T17:21:04+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/08/05/string</id>
    <content type="html"><![CDATA[<ul>
<li>String类没有提供用于修改字符串的方法。<strong><em>String类对象为不可变字符串</em></strong>，如字符串string=&ldquo;HELLO"永远只包含HELLO这几个字母，而不能修改其中任何一个字符。当然可以修改字符串变量string的引用，让它引用另一个字符串。</li>
<li><p>不可变字符串有一个优点：<strong><em>编译器可以让字符串实现共享</em></strong>。实际上只有字符串常量（使用“ ”声明，存储在字符串常量池中）是共享的，subStrng,+等操作产生的结果不能共享。（</p>

<ul>
<li>具体见JVM笔记</li>
<li>（1）只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</li>
<li>（2）对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。）</li>
</ul>
</li>
<li><p>比较字符串值是否相等时使用equals()方法，不能使用==，==比较的是字符串的地址是否相同。如果字符串在常量池中，可以使用==比较，因为指向的都是同一个字符串。</p></li>
<li><p><strong><em>直接使用 &ldquo; &rdquo; 声明的String对象会直接存储在常量池中</em></strong>，（可以实现共享）</p>

<ul>
<li>1.String str1=&ldquo;first&rdquo;;
 jvm在运行时先查找常量池中是否有该字符串，如果有则直接返回该字符串的引用给first(实现了字符串     的共享) ；否则先在常量池中创建该字符串并返回引用。
 <strong><em>此时只会在常量池中创建String对象，不会在堆中创建。</em></strong></li>
<li>2.String str2=new String(&ldquo;second&rdquo;);
 该代码生成了两个String对象。因为使用了<strong><em>“”会先在常量池中查找是否存在second对象</em></strong>，没有则创建
 否则不创建；在常量池创建完成后，由于<strong><em>使用了new，jvm会在堆中创建内容相同的String对象</em></strong>，并将引用返回给str2.</li>
<li>3.String str3=&ldquo;what&rdquo;; String str4=str3+&ldquo;a nice day&rdquo;;
 运行时，+ 相当于new，所以堆中会有“what a nice day”对象；常量池中会有"what" &ldquo;a nice day"两个对象，而不会有"what a nice day”对象。</li>
</ul>
</li>
</ul>


<!-- more -->


<pre><code>        package String;
        public class String_1 {
            public static void main(String[] args) {
                 //string1,string2都指向常量池中的同一个字符串first
                 //所以引用相同，值也相同
                 String string1="first";
                 String string2="first";
                 System.out.println(string1==string2);
                System.out.println(string1.equals(string2));

                 //string3指向常量池中的字符串second
                 //string4指向堆中的字符串second
                 //所以值相同，引用不同
                 String string3="second";
                 String string4=new String("second");
                 System.out.println(string3==string4);
                System.out.println(string3.equals(string4));

                 //string5指向常量池中的字符串third
                 //string6一开始指向堆中的字符串third,但是调用intern()方法之后，且该方法调用时先检查常量池中是否有值为string6
                 //的字符串，如果有则返回该字符串的引用，否则在常量池中创建该字符串，并返回引用
                 //所以一开始引用不相等，后来相等
                 String string5="third";
                 String string6=new String("third");
                 System.out.println(string5==string6);
                 string6=string6.intern();
                 System.out.println(string5==string6);
            }
        }
</code></pre>

<ul>
<li>关于常量池分为运行时常量池与静态常量池，具体详解查看JVM笔记

<ul>
<li>所谓<strong><em>静态常量池</em></strong>，即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串（数字）字面量，还包括类、方法的信息，占用class文件绝大部分空间。</li>
<li><p>而<strong><em>运行时常量池</em></strong>，则是JVM虚拟机在完成类装载操作后，将class文件中的常量池载入带内存中，并保存在方法区中，我们常说的常量池就是指方法区中的运行时常量池。<strong><em>运行时常量池中的常量，基本来源于各个class文件中的常量池。程序运行时，除非手动向常量池中添加常量（比如调用intern方法），否则JVM不会自动添加常量到常量池。</em></strong></p>

<pre><code>        String string1="te";
        String string2="st";
        String string3="test";
        String string4=string1+string2;
        String string5="te"+"st";
        String string6=new StringBuilder("test").toString();
        String string7=new String("test").intern(); 
        System.out.println(string3==string4);//false
        System.out.println(string3==string5);//true
        System.out.println(string4==string5);//false
        System.out.println(string3==string6);//false
    　　System.out.println(string3==string7);//true
</code></pre></li>
</ul>
</li>
</ul>


<p>以上所讲仅涉及字符串常量池，实际上还有整型常量池、浮点型常量池等等，但都大同小异，<strong><em>只不过数值类型的常量池不可以手动添加常量，程序启动时常量池中的常量就已经确定了，比如整型常量池中的常量范围：-128~127，只有合格范围的数字可以用到常量池。</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[枚举类型]]></title>
    <link href="http://ttazk.github.io/blog/2017/08/05/enum/"/>
    <updated>2017-08-05T16:59:07+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/08/05/enum</id>
    <content type="html"><![CDATA[<ul>
<li>所有的枚举类型都是Enum类的子类，枚举类型包括有限个命名的值。枚举类型的变量只能存储该类型中指定的枚举常量，或者null值。</li>
<li>枚举类型在定义时，可以添加指定的域，方法或者构造函数；当然构造函数为private，只是在声明枚举常量时调用，用于传递值。</li>
<li><p>枚举类型可以简单定义为：</p>

<pre><code>  enum Size{
           //枚举常量列表必须写在前面，否则编译出错
           Small,Mid,Larger,SuperLager;  
      }
</code></pre></li>
<li><p>也可以给枚举类型增加构造方法，然后每个枚举类型的值通过构造函数传入对应的参数</p>

<pre><code>  enum Size_1{ 
           //定义枚举常量，并利用构造函数传递值,
          Small("1"),Mid("2"),Larger("3"),SuperLarger("4");
           //定义私有变量
           private String size;
           //定义构造函数，类型为private，用于给枚举常量传递值
           private Size_1(String size){
               this.size=size;
           }
           //重写toString()方法，用于返回枚举常量的值
           @Override
           public String toString() {
               // TODO Auto-generated method stub
               return this.size;
           }

      }
</code></pre></li>
<li>完整代码及具体使用如下：</li>
</ul>


<!-- more -->


<pre><code>    package Enum;
    public class Enum_Test {
        enum Size{
             //枚举常量列表必须写在前面，否则编译出错
             Small,Mid,Larger,SuperLager;  
        }
        enum Size_1{
             //定义枚举常量，并利用构造函数传递值,
            Small("1"),Mid("2"),Larger("3"),SuperLarger("4");
             //定义私有变量
             private String size;
             //定义构造函数，类型为private，用于给枚举常量传递值
             private Size_1(String size){
                 this.size=size;
             }
             //重写toString()方法，用于返回枚举常量的值
             @Override
             public String toString() {
                 // TODO Auto-generated method stub
                 return this.size;
             }

        }
        public static void main(String[] args) {
             // TODO Auto-generated method stub
             Size size=Size.Larger;
             String string=size.toString();//默认toString()方法用于返回枚举常量名
             System.out.println(string);
             //toString()的逆方法是valueOf(),即根据给定的常量名，返回对应的枚举变量
             Size size2=Enum.valueOf(Size.class, "Larger");
             System.out.println(size==size2);//比较两个枚举类型的值时，直接使用==，不需要使用equals();

             Size_1 size_1=Size_1.Larger;
             String string2=size_1.toString();//返回枚举常量的值
             System.out.println(string2);
             Size_1[] size_2=Size_1.values();//values()返回包含全部枚举常量的数组
             System.out.println(size_2[1]);

            System.out.println(size_1.ordinal());//ordinal()方法返回枚举常量的位置
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java代理]]></title>
    <link href="http://ttazk.github.io/blog/2017/06/04/proxy/"/>
    <updated>2017-06-04T15:51:47+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/06/04/proxy</id>
    <content type="html"><![CDATA[<ul>
<li>代理（Proxy）:利用代理可以在运行时创建一个实现了一组给定接口的新类。</li>
<li>代理类可以在运行时创建全新的类，这样的代理类能够实现指定的接口，代理类具有的方法如下：

<ul>
<li>指定接口所需要的全部方法。</li>
<li>Object类中的全部方法，（所有的代理类都覆盖了Object类中的方法toString,equals,hashCode,其他方法如，clone,getClass没有重新定义）</li>
<li><p>然而，不能在运行时定义这些方法的代码，而是要提供一个调用处理器(invocation Handler)。调用处理器是实现了InvocationHandler接口的类对象，在这个接口中只有一个方法：</p>

<pre><code>  Object invoke(Object proxy,Method method,Object[] args)
</code></pre></li>
</ul>
</li>
<li>无论何时调用代理对象的任何方法，调用处理器的invoke（）方法都会被调用，并向其传递Method对象和原始的调用参数。调用处理器必须给出处理调用的方式。</li>
</ul>


<!--  more -->


<h3>创建代理对象</h3>

<ul>
<li><p>需要使用Proxy类的newProxyInstance方法，该方法有三个参数</p>

<ul>
<li>一个类加载器(class loader)。对于预定义类使用null作为默认的类加载器，对于自定义的接口，使用：myInterface.class.getClassLoader()(其中myInterface为要实现的接口)</li>
<li>一个class对象数组，每个元素都是要实现的接口。</li>
<li>一个调用处理器。</li>
</ul>
</li>
<li><p>简单示例如下：</p>

<pre><code>  interface  Proxy1{
      public void print();
  }
  class ImpHandler implements InvocationHandler{

      @Override
      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
          // TODO Auto-generated method stub
           System.out.println("Invoke invoke() method");
           String string="return String";
          return string;
      }

  }
  public class ProxyTest {

      public static void main(String[] args) {
           // TODO Auto-generated method stub
           InvocationHandler invocationHandler=new ImpHandler();
           Object proxy=Proxy.newProxyInstance(Proxy1.class.getClassLoader(), new Class[]{Proxy1.class}, invocationHandler);
           proxy.toString();
      }
  }
  输出结果为：
  Invoke invoke() method
</code></pre></li>
<li><p>代理对象属于在运行时定义的类。没有定义代理类的名字（所以在创建代理对象时，将返回的引用传递给Object变量），sun虚拟机中的Proxy类将生成一个以字符串$Proxy开头的类名，如$proxy0.</p>

<h3>代理类的特性</h3></li>
<li>代理类是在程序运行时创建的，然而一旦创建，就变成了常规类，与其他类没有区别。</li>
<li>所有的代理类都扩展于Proxy类。一个代理类只有一个实例域&mdash;调用处理器，它定义在Proxy的父类中。为了履行代理对象的职责，所需要的任何附加数据都必须存储在调用处理器中。</li>
<li>所有的代理类中的方法仅仅调用了调用处理器的invoke()方法。</li>
<li>对于特定的类加载器与预设的一组接口来说，只能有一个代理类。也就是说，如果使用同一个类加载器和接口数组调用两次newProxyInstance()方法的话，那么只能得到同一个类的两个对象。</li>
<li><p>可以调用Proxy类的getProxyClass方法获取实现指定接口的代理类：</p>

<pre><code>  static Class&lt;?&gt; getProxyClass(classLoader,interfaces)
</code></pre></li>
<li>代理类一定是public final。如果代理类实现的所有接口都是public,代理类就不属于某个特定的包；否则所有的非公有接口都必须属于同一个包，同时代理类也属于这个包。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[B树，B+树，B*树简介]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/22/btree/"/>
    <updated>2017-04-22T11:30:13+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/22/btree</id>
    <content type="html"><![CDATA[<ul>
<li><h3>B树又叫平衡多路查找树（Balance-Tree)，一棵m阶B树满足以下条件：</h3>

<ul>
<li>每个节点至多有m棵子树</li>
<li>除根节点外，其他节点至少有|m/2|棵子树</li>
<li>根节点至少有两棵子树（除非B树只有一个节点）</li>
<li>所有的叶子节点位于同一层上。B树的叶子节点可以看做一种外部节点，不包含任何信息。</li>
<li>有j个孩子的非叶子节点恰好有（j-1）个关键字，关键字按照递增的次序排列。</li>
<li>对于一棵包含N个关键字，高度为h，最小度数t>=2的B树，有h&lt;=logt（(N+1)/2）
</br></br></li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><h3>B+树：</h3>

<ul>
<li>B+树是应文件系统所需而产生的B树的变形。</li>
<li><p>m阶B+树与m阶B树的异同点：</p>

<ul>
<li>有n棵子树的节点中包含n-1个关键字。（同）</li>
<li>所有的叶子节点中包含了全部的关键字信息，以及指向这些关键字记录的指针，且叶子节点本身依关键字大小顺序连接。（B树的叶子节点并没有包含全部需要查找的信息）</li>
<li>所有的非终端节点可以看做是索引部分，节点中仅含有其子树根节点中最大（或最小）关键字。（而B树的非终端节点中页也包含需要查找的信息）</li>
</ul>
</li>
<li><p>总的来说B+树与B树的区别是：B树所有节点都包含查找的信息（类似于二叉查找树），对于要查找的关键字key，最终查找的节点可能是叶子节点，也可能是非叶子节点；B+树中只有叶子节点包含要查找的信息，非叶子节点只是作为一种索引帮助找到叶子节点的位置，对于要查找的关键字key，最终只能在叶子节点中查找到。</p></li>
<li>为什么说B+树比B树更适合实际应用中操作系统的文件索引与数据库索引？

<ul>
<li><p>B+树磁盘读写代价更低</p>

<ul>
<li>B+-tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了</li>
<li>举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。</li>
</ul>
</li>
<li><p>B+树的查询效率更稳定</p>

<ul>
<li>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p></br></br></p>

<ul>
<li><h3>B*树：</h3>

<ul>
<li>B<em>-tree是B+ Tree的变体，在B+树的基础上(所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针)，B</em>树中非根和非叶子结点再增加指向兄弟的指针。
</br></br></li>
</ul>
</li>
<li><h3>总结：</h3>

<ul>
<li>B树：有序数组+平衡多叉树。</li>
<li>B+树：有序数组链表+平衡多叉树。</li>
<li>B*数：一棵丰满的B+树。</li>
<li>B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。</li>
<li> B+树中只有叶子节点会带有指向记录的指针（ROWID），而B树则所有节点都带有，在内部节点出现的索引项不会再出现在叶子节点中。B+树中所有叶子节点都是通过指针连接在一起，而B树不会。</li>
<li><p>B+树的优点：</p>

<ul>
<li><ol>
<li>非叶子节点不会带上ROWID，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</li>
</ol>
</li>
<li><ol>
<li>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</li>
</ol>
</li>
</ul>
</li>
<li><p>B树的优点：</p>

<ul>
<li>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object详解]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/19/object/"/>
    <updated>2017-04-19T20:07:37+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/19/object</id>
    <content type="html"><![CDATA[<ul>
<li>Object类是所有类的父类，每个类都是由Object类扩展而来。如果没有明确指出父类，则默认为Object类为该类的父类。</li>
<li>可以使用Object类型的变量引用任何类型的对象。</li>
<li><p>在Java中，只有基本数据类型（数字，字符，布尔）不是对象。所有的数组类型，不管是对象数组还是基本类型的数组都扩展了Object类。</p>

<pre><code>  int[] i=new int[5];
  Object obj=i;
</code></pre>

<h3>equals()方法</h3></li>
<li>在Object类中，该方法用于判断两个对象是否具有相同的引用。</li>
<li><p>然而，经常需要检测两个对象的状态的相等性，所以一般需要覆写equals()方法。</p>

<pre><code>  public class Test{
             public boolean equals(Object otherObject){
                  }
         }
</code></pre></li>
<li>在子类中定义equals方法时，首先调用父类的equals方法。如果检测失败，则对象不可能相等。如果父类中的域都相等，就需要比较子类中的实例域。</li>
</ul>


<!--  more -->


<pre><code>         public class Test{
                   public boolean equals(Object otherObject){
                   if(!super.equals(otherObject)) return false;
                    //接着比较子类中扩展的实例域    
                   }
               }        
</code></pre>

<ul>
<li><p>Java规范要求equals方法具有下面的特性：</p>

<ul>
<li>自反性：对于非空引用 x,x.equals(x)应该返回true.</li>
<li>对称性：如果x.equals(y)返回true,则y.equals(x)也应该返回true</li>
<li>传递性：x.equals(y)返回true,y.equals(z)返回true，则x.equals(z)返回true</li>
<li>一致性：如果x,y引用的对象没有发生改变，反复调用x.equals(y)返回相同的结果</li>
<li>对于非空引用x，x.equals(null)应该返回false.<br/><br/></li>
</ul>
</li>
<li><p>编写equals方法的步骤：</p>

<ul>
<li>显式参数命名为otherObject，稍后需将它转换成叫做other的变量</li>
<li><p>检测this与otherObject是否引用同一个对象</p>

<pre><code>  if(this==otherObject)
  return true;
</code></pre></li>
<li><p>检测otherObject是否为null，如果为null，则返回false</p>

<pre><code>   if(otherObject==null)  
   return false;
</code></pre></li>
<li><p>比较this与otherObject是否属于同一个类</p>

<pre><code>  if(this.getClass!==otherObject.getClass)  
  return false;
</code></pre></li>
<li><p>将otherObject转换为相应的类类型变量</p>

<pre><code>   ClassName other=(ClassName)otherObject
</code></pre></li>
<li><p>对所有需要比较的域进行比较。使用==比较基本类型域，使用equals比较对象域。如果所有的域都匹配则返回true,否则返回false.</p>

<pre><code>  return field1==other.field&amp;&amp;Objects.equals(field,other.field)
</code></pre>

<br/><br/>

<h3>hashCode()方法</h3></li>
</ul>
</li>
<li>散列码(hash code)是由对象导出的一个整型值（可以是负数）。散列码没有规律，两个不同对象的散列码基本不同。</li>
<li>在Object类中，hashCode()方法的返回值默认为对象的存储地址。</li>
<li><p>String类型重写了hashCode()方法，字符串的散列码是由内容导出的。计算过程如下：</p>

<pre><code>        int hash=0;
        for(int i=0;i&lt;length();i++){
             hash=31*hash+charAt(i);
        }
        //String str1="string";  String str2=new String("string");
        //str1,str2的散列码值相同，因为其内容相同。
</code></pre></li>
<li>如果重新定义equals()方法，就必须重新定义hashCode()方法，以便用户可以将对象插入到散列表中。equals()方法与hashCode()方法的定义必须一致：如果x.equals(y)返回true,那么x.hashCode()的值必须与y.hashCode()值相等。</li>
<li><p>如果存在数组类型的域，可以使用静态的Arrays.hashCode()方法计算一个散列码，这个散列码由数组元素的散列码组成。</p>

<pre><code>  static int hashCode(type[] a)//数组类型可以是任意类型
</code></pre>

<br/><br/>

<h3>toString()方法</h3></li>
<li>该方法用于返回表示对象值的字符串。</li>
<li>Object类中的toString()方法返回对象所属的类名及散列码。</li>
<li>只要将对象与一个字符串通过"+&ldquo;相连，Java编译器就会自动调用toString()方法，以便获得这个对象的字符串表示。</li>
<li>大部分类覆写了toString()方法，返回值为：类的名字，随后是一对方括号括起来的域值。</li>
<li><p>数组类型继承了Object类的toString方法，如果直接输出数组，如：int[] arr={1,2,3};，会生成字符串：类型+hashCode。如果想要输出[1,2,3]，则需调用Arrays.toString()方法。</p>

<pre><code>      static String toString(type[] a)            
</code></pre>

<br/><br/>

<h3>getClass()方法</h3></li>
<li>返回此 Object 的运行时类。返回的 Class 对象是由所表示类的 static synchronized 方法锁定的对象
<br/><br/>

<h3>protected Object clone()</h3></li>
<li>创建并返回此对象的一个副本。“副本”的准确含义可能依赖于对象的类。这样做的目的是，对于任何对象 x表达式： x.clone() != x 为 true，表达式： x.clone().getClass() == x.getClass()也为 true，但这些并非必须要满足的要求。</li>
<li>一般情况下： x.clone().equals(x)为 true，但这并非必须要满足的要求。</li>
<li>按照惯例，返回的对象应该通过调用 super.clone 获得。如果一个类及其所有的超类（Object 除外）都遵守此约定，则 x.clone().getClass() == x.getClass()。</li>
<li>按照惯例，此方法返回的对象应该独立于该对象（正被复制的对象）。要获得此独立性，在 super.clone 返回对象之前，有必要对该对象的一个或多个字段进行修改。这通常意味着要复制包含正在被复制对象的内部“深层结构”的所有可变对象，并使用对副本的引用替换对这些对象的引用。如果一个类只包含基本字段或对不变对象的引用，那么通常不需要修改 super.clone 返回的对象中的字段。</li>
<li>Object 类的 clone 方法执行特定的复制操作。首先，如果此对象的类不能实现接口 Cloneable，则会抛出 CloneNotSupportedException。注意，所有的数组都被视为实现接口 Cloneable。否则，此方法会创建此对象的类的一个新实例，并像通过分配那样，严格使用此对象相应字段的内容初始化该对象的所有字段；这些字段的内容没有被自我复制。所以，此方法执行的是该对象的“浅表复制”，而不“深层复制”操作。</li>
<li>Object 类本身不实现接口 Cloneable，所以在类为 Object 的对象上调用 clone 方法将会导致在运行时抛出异常。
<br/><br/>

<h3>public final void notify()</h3></li>
<li>唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。</li>
<li>直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。</li>
<li>此方法只应由作为此对象监视器的所有者的线程来调用。通过以下三种方法之一，线程可以成为此对象监视器的所有者：

<ul>
<li>通过执行此对象的同步实例方法。</li>
<li>通过执行在此对象上进行同步的 synchronized 语句的正文。</li>
<li>对于 Class 类型的对象，可以通过执行该类的同步静态方法。</li>
</ul>
</li>
<li>一次只能有一个线程拥有对象的监视器。
<br/><br/>

<h3>public final void wait(long timeout)</h3></li>
<li>此方法导致当前线程（称之为 T）将其自身放置在对象的等待集中，然后放弃此对象上的所有同步要求。出于线程调度目的，在发生以下四种情况之一前，线程 T 被禁用，且处于休眠状态：

<ul>
<li>其他某个线程调用此对象的 notify 方法，并且线程 T 碰巧被任选为被唤醒的线程。</li>
<li>其他某个线程调用此对象的 notifyAll 方法。</li>
<li>其他某个线程中断线程 T。</li>
<li>大约已经到达指定的实际时间。但是，如果 timeout 为零，则不考虑实际时间，在获得通知前该线程将一直等待。</li>
</ul>
</li>
<li>然后，从对象的等待集中删除线程 T，并重新进行线程调度。然后，该线程以常规方式与其他线程竞争，以获得在该对象上同步的权利；一旦获得对该对象的控制权，该对象上的所有其同步声明都将被恢复到以前的状态，这就是调用 wait 方法时的情况。然后，线程 T 从 wait 方法的调用中返回。所以，从 wait 方法返回时，该对象和线程 T 的同步状态与调用 wait 方法时的情况完全相同
<br/><br/>

<h3>protected void finalize()</h3></li>
<li>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。子类重写 finalize 方法，以配置系统资源或执行其他清除。</li>
</ul>


<h3>protected void finalize() throws Throwable</h3>

<ul>
<li>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。子类重写 finalize 方法，以配置系统资源或执行其他清除。</li>
<li>finalize 的常规协定是：当 JavaTM 虚拟机已确定尚未终止的任何线程无法再通过任何方法访问此对象时，将调用此方法，除非由于准备终止的其他某个对象或类的终结操作执行了某个操作。finalize 方法可以采取任何操作，其中包括再次使此对象对其他线程可用；不过，finalize 的主要目的是在不可撤消地丢弃对象之前执行清除操作。例如，表示输入/输出连接的对象的 finalize 方法可执行显式 I/O 事务，以便在永久丢弃对象之前中断连接。</li>
<li>Object 类的 finalize 方法执行非特殊性操作；它仅执行一些常规返回。Object 的子类可以重写此定义。</li>
<li>Java 编程语言不保证哪个线程将调用某个给定对象的 finalize 方法。但可以保证在调用 finalize 时，调用 finalize 的线程将不会持有任何用户可见的同步锁定。如果 finalize 方法抛出未捕获的异常，那么该异常将被忽略，并且该对象的终结操作将终止。</li>
<li>在启用某个对象的 finalize 方法后，将不会执行进一步操作，直到 Java 虚拟机再次确定尚未终止的任何线程无法再通过任何方法访问此对象，其中包括由准备终止的其他对象或类执行的可能操作，在执行该操作时，对象可能被丢弃。</li>
<li>对于任何给定对象，Java 虚拟机最多只调用一次 finalize 方法。</li>
<li>finalize 方法抛出的任何异常都会导致此对象的终结操作停止，但可以通过其他方法忽略它。</li>
</ul>

]]></content>
  </entry>
  
</feed>
