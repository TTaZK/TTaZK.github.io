<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javase | Coding BY ZK]]></title>
  <link href="http://ttazk.github.io/blog/categories/javase/atom.xml" rel="self"/>
  <link href="http://ttazk.github.io/"/>
  <updated>2017-06-04T15:26:56+08:00</updated>
  <id>http://ttazk.github.io/</id>
  <author>
    <name><![CDATA[Z K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[B树，B+树，B*树简介]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/22/btree/"/>
    <updated>2017-04-22T11:30:13+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/22/btree</id>
    <content type="html"><![CDATA[<ul>
<li><h3>B树又叫平衡多路查找树（Balance-Tree)，一棵m阶B树满足以下条件：</h3>

<ul>
<li>每个节点至多有m棵子树</li>
<li>除根节点外，其他节点至少有|m/2|棵子树</li>
<li>根节点至少有两棵子树（除非B树只有一个节点）</li>
<li>所有的叶子节点位于同一层上。B树的叶子节点可以看做一种外部节点，不包含任何信息。</li>
<li>有j个孩子的非叶子节点恰好有（j-1）个关键字，关键字按照递增的次序排列。</li>
<li>对于一棵包含N个关键字，高度为h，最小度数t>=2的B树，有h&lt;=logt（(N+1)/2）
</br></br></li>
</ul>
</li>
</ul>


<!-- more -->


<ul>
<li><h3>B+树：</h3>

<ul>
<li>B+树是应文件系统所需而产生的B树的变形。</li>
<li><p>m阶B+树与m阶B树的异同点：</p>

<ul>
<li>有n棵子树的节点中包含n-1个关键字。（同）</li>
<li>所有的叶子节点中包含了全部的关键字信息，以及指向这些关键字记录的指针，且叶子节点本身依关键字大小顺序连接。（B树的叶子节点并没有包含全部需要查找的信息）</li>
<li>所有的非终端节点可以看做是索引部分，节点中仅含有其子树根节点中最大（或最小）关键字。（而B树的非终端节点中页也包含需要查找的信息）</li>
</ul>
</li>
<li><p>总的来说B+树与B树的区别是：B树所有节点都包含查找的信息（类似于二叉查找树），对于要查找的关键字key，最终查找的节点可能是叶子节点，也可能是非叶子节点；B+树中只有叶子节点包含要查找的信息，非叶子节点只是作为一种索引帮助找到叶子节点的位置，对于要查找的关键字key，最终只能在叶子节点中查找到。</p></li>
<li>为什么说B+树比B树更适合实际应用中操作系统的文件索引与数据库索引？

<ul>
<li><p>B+树磁盘读写代价更低</p>

<ul>
<li>B+-tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了</li>
<li>举个例子，假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就是盘片旋转的时间)。</li>
</ul>
</li>
<li><p>B+树的查询效率更稳定</p>

<ul>
<li>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p></br></br></p>

<ul>
<li><h3>B*树：</h3>

<ul>
<li>B<em>-tree是B+ Tree的变体，在B+树的基础上(所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针)，B</em>树中非根和非叶子结点再增加指向兄弟的指针。
</br></br></li>
</ul>
</li>
<li><h3>总结：</h3>

<ul>
<li>B树：有序数组+平衡多叉树。</li>
<li>B+树：有序数组链表+平衡多叉树。</li>
<li>B*数：一棵丰满的B+树。</li>
<li>B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。</li>
<li> B+树中只有叶子节点会带有指向记录的指针（ROWID），而B树则所有节点都带有，在内部节点出现的索引项不会再出现在叶子节点中。B+树中所有叶子节点都是通过指针连接在一起，而B树不会。</li>
<li><p>B+树的优点：</p>

<ul>
<li><ol>
<li>非叶子节点不会带上ROWID，这样，一个块中可以容纳更多的索引项，一是可以降低树的高度。二是一个内部节点可以定位更多的叶子节点。</li>
</ol>
</li>
<li><ol>
<li>叶子节点之间通过指针来连接，范围扫描将十分简单，而对于B树来说，则需要在叶子节点和内部节点不停的往返移动。</li>
</ol>
</li>
</ul>
</li>
<li><p>B树的优点：</p>

<ul>
<li>对于在内部节点的数据，可直接得到，不必根据叶子节点来定位。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程池详解]]></title>
    <link href="http://ttazk.github.io/blog/2017/04/11/threadpool/"/>
    <updated>2017-04-11T21:00:36+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/04/11/threadpool</id>
    <content type="html"><![CDATA[<ul>
<li>线程池是管理一组同构线程的资源池。线程池与工作队列密切相关，其中在工作队列中保存了所有等待执行的任务。<strong>工作者线程的任务是：从工作队列中取出一个任务，执行任务，然后返回线程等待下一个任务。线程池通过重用线程，而不是新建线程，减小线程创建与销毁的开销</strong>。</li>
<li>Excutor是顶级线程池接口</li>
<li>ExecutorService是真正的线程池接口。</li>
<li>Executors类提供了一些静态工厂用于生成一些常用的线程池，当将一个任务添加到线程池时，线程池会为每个任务创建一个线程，该线程会在某个时刻执行。</li>
</ul>


<!--  more -->


<p> <strong>public class Executors extends Object</strong></p>

<pre><code>public static ExecutorService newCachedThreadPool()
空闲线程会被保留60秒。对于每个任务，如果有空闲线程可用，立即让它执行任务；如果没有空闲的线程，则创建一个新的线程。

public static ExecutorService newFixedThreadPool(int nThreads)
构建一个具有固定大小的线程池。如果提交的任务大于空闲的线程数，则把任务放置到队列中。

public static ExecutorService newSingleThreadExecutor()
 线程数目为1的线程池，由一个线程执行提交的任务，一个接一个。
</code></pre>

<ul>
<li>为了解决执行服务的生命周期问题，ExecutorService扩展了Executor接口，添加了一些用于生命周期管理的方法。</li>
<li><strong>ExecutorService的生命周期有三种：运行，关闭，已终止。ExecutorService在初始创建时处于运行状态。shutdowm方法将执行平缓的关闭过程：不再接受新的任务，同时等待已经提交的任务的完成&mdash;包括那写还没有开始执行的任务。shutdownNow方法将执行粗暴的关闭过程：它将取消所有运行中的任务，并且不再启动队列中尚未开始的任务。在ExecutorService关闭后提交的任务将由“拒绝处理执行器 ”来处理，它会抛弃任务，或者使得execute()方法抛出一个未检查异常。等到所有的任务完成后，ExecutorService进入终止状态。</strong></li>
</ul>


<p><strong>public interface ExecutorService extends Executor</strong></p>

<p>Executor 提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。
可以关闭 ExecutorService，这将导致其拒绝新任务。提供两个方法来关闭 ExecutorService。shutdown() 方法在终止前允许执行以前提交的任务，而 shutdownNow() 方法阻止等待任务启动并试图停止当前正在执行的任务。在终止时，执行程序没有任务在执行，也没有任务在等待执行，并且无法提交新任务。应该关闭未使用的 ExecutorService 以允许回收其资源。</p>

<p>通过创建并返回一个可用于取消执行和/或等待完成的 Future，方法 submit 扩展了基本方法 Executor.execute(java.lang.Runnable)。方法 invokeAny 和 invokeAll 是批量执行的最常用形式，它们执行任务 collection，然后等待至少一个，或全部任务完成（可使用 ExecutorCompletionService 类来编写这些方法的自定义变体）。</p>

<pre><code>    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)
    提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。该 Future 的 get 方法在成功完成时将会返回该任务的结果。

    &lt;T&gt; Future&lt;T&gt; submit(Runnable task,
                         T result)
    提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功完成时将会返回给定的结果。

    Future&lt;?&gt; submit(Runnable task)
    提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功 完成时将会返回 null。

    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
                              throws InterruptedException
    执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 Future.isDone() 为 true。注意，可以正常地或通过抛出异常来终止已完成 任务。如果正在进行此操作时修改了给定的 collection，则此方法的结果是不确定的。

    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
               throws InterruptedException,
                       ExecutionException
    执行给定的任务，如果某个任务已成功完成（也就是未抛出异常），则返回其结果。一旦正常或异常返回后，则取消尚未完成的任务。如果此操作正在进行时修改了给定的 collection，则此方法的结果是不确定的。

    void shutdown()
    启动一次顺序关闭，执行以前提交的任务，但不接受新任务。如果已经关闭，则调用没有其他作用。

    List&lt;Runnable&gt;  shutdownNow()
    试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。 无法保证能够停止正在处理的活动执行任务，但是会尽力尝试。例如，通过 Thread.interrupt() 来取消典型的实现，所以任何任务无法响应中断都可能永远无法终止。

    boolean isShutdown()
    如果此执行程序已关闭，则返回 true。

    boolean isTerminated()
    如果关闭后所有任务都已完成，则返回 true。注意，除非首先调用 shutdown 或 shutdownNow，否则 isTerminated 永不为 true。
</code></pre>

<ul>
<li><p>Runnable封装了一个异步运行的任务，可以把它想象为一个没有参数和返回值的方法。Callable与Runnable类似，但是有返回值。</p>

<pre><code>    public interface Callable&lt;V&gt;{
         v call() throws Exception;  
    }
</code></pre></li>
</ul>


<p><strong>public interface Future<V></strong></p>

<p>Future 表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并获取计算的结果。计算完成后只能使用 get 方法来获取结果，如有必要，计算完成前可以阻塞此方法。取消则由 cancel 方法来执行。还提供了其他方法，以确定任务是正常完成还是被取消了。一旦计算完成，就不能再取消计算。如果为了可取消性而使用 Future 但又不提供可用的结果，则可以声明 Future&lt;?> 形式类型、并返回 null 作为底层任务的结果。</p>

<p>用法示例（注意，下列各类都是构造好的。）</p>

<pre><code>    interface ArchiveSearcher { String search(String target); }
    class App {
      ExecutorService executor = ...
      ArchiveSearcher searcher = ...
      void showSearch(final String target)
          throws InterruptedException {
        Future&lt;String&gt; future
          = executor.submit(new Callable&lt;String&gt;() {
            public String call() {
                return searcher.search(target);
            }});
        displayOtherThings(); // do other things while searching
        try {
          displayText(future.get()); // use future
        } catch (ExecutionException ex) { cleanup(); return; }
      }
    }
</code></pre>

<ul>
<li><p>FutureTask 类是 Future 的一个实现，Future 可实现 Runnable，所以可通过 Executor 来执行。例如，可用下列内容替换上面带有 submit 的构造：</p>

<pre><code>  FutureTask&lt;String&gt; future =
    new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() {
      public String call() {
        return searcher.search(target);
    }});
  executor.execute(future);
</code></pre>

<p>Future的方法：</p>

<pre><code>  boolean cancel(boolean mayInterruptIfRunning)
  试图取消对此任务的执行。如果任务已完成、或已取消，或者由于某些其他原因而无法取消，则此尝试将失败。当调用 cancel 时，如果调用成功，而此任务尚未启动，则此任务将永不运行。如果任务已经启动，则 mayInterruptIfRunning 参数确定是否应该以试图停止任务的方式来中断执行此任务的线程。
  此方法返回后，对 isDone() 的后续调用将始终返回 true。如果此方法返回 true，则对 isCancelled() 的后续调用将始终返回 true。

  boolean isCancelled()
  如果在任务正常完成前将其取消，则返回 true。

  boolean isDone()
  如果任务已完成，则返回 true。 可能由于正常终止、异常或取消而完成，在所有这些情况中，此方法都将返回 true。

  V get()    throws InterruptedException,
              ExecutionException
  如有必要，等待计算完成，然后获取其结果。
  get方法调用被阻塞，直到计算完成。

  V get(long timeout,
        TimeUnit unit)
        throws InterruptedException,
              ExecutionException,
              TimeoutException
  如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用）。
  get方法调用被阻塞，直到计算完成，如果在计算完成之前超时，将抛出TimeoutExecption异常。
</code></pre></li>
</ul>


<p><strong>public class FutureTask<V> extends Object implements</strong> <strong>RunnableFuture<V> ,Runnable,Future<V></strong></p>

<ul>
<li>可取消的异步计算。利用开始和取消计算的方法、查询计算是否完成的方法和获取计算结果的方法，此类提供了对 Future 的基本实现。仅在计算完成时才能获取结果；如果计算尚未完成，则阻塞 get 方法。一旦计算完成，就不能再重新开始或取消计算。</li>
<li><p>可使用 FutureTask 包装 Callable 或 Runnable 对象。因为 FutureTask 实现了 Runnable，所以可将 FutureTask 提交给 Executor 执行。</p>

<pre><code>  public FutureTask(Callable&lt;V&gt; callable)
  创建一个 FutureTask，一旦运行就执行给定的 Callable。

  public FutureTask(Runnable runnable,
                    V result)
  创建一个 FutureTask，一旦运行就执行给定的 Runnable，并安排成功完成时 get 返回给定的结果 。
</code></pre></li>
<li><p>使用连接池应该做的事：</p>

<ul>
<li>调用Executors类中的静态方法newCachedThreadPool或newFixedThreadPool。</li>
<li>调用submit()提交Runnable/Callable对象，会得到一个Future对象，可以用来查询该任务的状态。</li>
<li><p>当不想提交任务时，调用shutDowm。</p>

<pre><code>  class ThreadTest implements Runnable {
      public synchronized void run() {
           for (int i = 0; i &lt; 5; i++) {
               System.out.print(i+" ");
           }
           System.out.println();
      }
  }

  public class ThreadPoolTest {

      public static void main(String[] args) {
           // TODO Auto-generated method stub
           ExecutorService executorService=Executors.newCachedThreadPool();
           ThreadTest thread=new ThreadTest();
           for(int i=0;i&lt;10;i++){
               executorService.execute(thread);
           }
           executorService.shutdown();
      }
  }
</code></pre></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[泛型程序设计]]></title>
    <link href="http://ttazk.github.io/blog/2017/03/22/generic/"/>
    <updated>2017-03-22T14:06:10+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/03/22/generic</id>
    <content type="html"><![CDATA[<ul>
<li>泛型程序设计意味着编写的代码可以被很多不同类型的对象所重用。</li>
<li><p>在增加泛型之前，泛型程序是利用继承实现的。</p>

<pre><code>  public class ArrayList{
  private Object[] data;
   ...
  public Object get(int i){}
  public void add(Object o){}
  }
</code></pre></li>
<li>这种方法有两个问题：</li>
<li>1.当获取一个值时必须进行强制类型转换。</li>
<li><p>2.没有错误检查，可以向数组列表中添加任何类的对象。</br></br></p></li>
<li><p>泛型提供了一个更好的解决方法：类型参数，用来指示存储元素的类型。如：ArrayList<String> arl=new ArrayList&lt;>();   (jdk1.7之后，构造函数中可以省略泛型类型)。</p>

<ul>
<li>对此编译器可以进行检查，避免插入错误的类型，同时在获取对象时不需要进行强制类型转换。</li>
<li><p>一个泛型类(generic class)就是具有一个或多个类型变量的类。
      public class Pair<T> {
      private T first;
      private T second;</p>

<pre><code>  public Pair(){
       this.first=null;
       this.second=null;
  }
  public Pair(T first,T second){
       this.first=first;
       this.second=second;
  }

  public T getFirst(){
       return first;
  }
  public T getSecond(){
       return second;
  }
  public void setFirst(T first){
       this.first=first;
  }
  public void setSecond(T second){
       this.second=second;
      }
  }
</code></pre></li>
<li>如上所示，Pair类引入了一个类型变量T,用&lt;>括起来，并放在类名之后。泛型类可以有多个类型变量。例如可以定义Pair类，两个域分别使用不同的类型变量：public class Pair&lt;T,V>{&hellip;}.</li>
<li>类中定义的泛型变量指定方法的返回类型，以及域和局部变量的类型。（一般来说，K,V分别表示关键字与值的类型，T表示任意类型）。</li>
<li>用具体的类型替换类型变量就可以实例化泛型类型，如Pair<String>。换句话来说，泛型类可以看做普通类的工厂。
</br></br></li>
</ul>
</li>
</ul>


<!--more-->


<h3>* 泛型方法</h3>

<ul>
<li><p>可以在一个普通类中定义一个带有类型参数的简单方法。</p>

<pre><code>public class Generic {
public static &lt;T&gt; void print(T t){
System.out.println(t);
    }
}
</code></pre></li>
<li><p>注意：类型变量放在修饰符的后面，返回类型的前面。</p></li>
<li>泛型方法可以定义在普通类中，也可以定义在泛型类中。</li>
<li><p>当调用一个泛型方法时，可以在方法名前的&lt;>中放入具体的类型，也可以省略&lt;>类型参数。</p>

<pre><code>Generic.print("no");
Generic.&lt;String&gt;print("nothing");
</code></pre></li>
</ul>


<h3>* 类型变量的限定</h3>

<ul>
<li><p>有时，需要对类或泛型方法中的类型变量加以限定。</p>

<pre><code>      public static &lt;T extends Comparable&gt; void sys(T t){
       System.out.println(t);
      }
</code></pre></li>
<li>可以对泛型变量T进行限定，将其限定为实现了Comparable接口的类。</li>
<li><T extends BoundingType> 表示：T应该是绑定类型的子类型。T和绑定类型可以是类，也可以是接口。</li>
<li>一个类型变量或通配符可以有多个限定，如：T extends Comaprable &amp; Serializable</li>
<li>在Java的继承中，可以根据需要有多个接口的父类型，但是限定中至多只能有一个类，且必须是限定列表中的第一个。</li>
</ul>


<h3>* 类型擦除</h3>

<ul>
<li>在虚拟机中，没有泛型类型对象&mdash;-所有的对象都属于普通类。</li>
<li>无论何时定义一个泛型类型，都会自动提供一个相应的原始类型(raw type)。原始类型的名字就是删去类型参数后的泛型类型名。擦除类型变量，并替换为限定类型（没有限定类型就用Object）。</li>
<li><p>例如，Pair<T>的原始类型为：
      public class Pair{
      private Object first;
      private Object second;</p>

<pre><code>  public Pair(){
       this.first=null;
       this.second=null;
  }
  public Pair(Object first,Object second){
       this.first=first;
       this.second=second;
  }

  public Object getFirst(){
       return first;
  }
  public Object getSecond(){
       return second;
  }
  public void setFirst(Object first){
       this.first=first;
  }
  public void setSecond(Object second){
       this.second=second;
  }
  }
</code></pre></li>
<li><p>在程序中可以包含不同类型的Pair，如Pair<String>,Pair<LocalDate>，但是类型擦除后就变成了原始的Pair类型了。</p></li>
<li>原始类型用第一个限定类型来替换参数变量，如果没有给定限定类型，就用Object替换。</li>
<li>为了提高效率，应该将标签接口(没有方法的接口)放在列表的末尾。</li>
</ul>


<h3>* 翻译泛型表达式</h3>

<ul>
<li><p>当程序调用泛型方法时，如果擦除返回类型，编译器则插入强制类型转换。</p>

<pre><code>  Pair&lt;Employee&gt; p=new Pair&lt;&gt;();
  Employee e=p.getFirst();//先对原始方法调用Pair.getFirst();再将返回的Object类型强制转换成Employee类型。
</code></pre></li>
<li>关于java泛型转换的事实：

<ul>
<li>虚拟机中没有泛型，只有普通的类与方法。</li>
<li>所有的参数类型都用它们的限定类型进行替换。</li>
<li>为了保持类型安全，必要时插入强制类型转换。</li>
<li>桥方法被合成来保持多态。</li>
</ul>
</li>
</ul>


<h3>* 约束与局限性(大多数限制都是由类型擦除引起的)</h3>

<h5>* 不能用基本类型实例化类型参数</h5>

<ul>
<li>因此没有Pair<double>，只有Pair<Double>。原因是类型擦除，擦除之后，Pair类含有Object域，而Object域不能存储基本类型。

<h5>* 运行时类型查询只适用于原始类型</h5></li>
<li><p>虚拟机中的对象总有一个特定的非泛型类型，因此，所有的类型查询只产生原始类型。</p>

<pre><code>  Pair&lt;String&gt; pair=new Pair&lt;String&gt;();
  if (pair instanceof Pair&lt;String&gt;) {    //error
     System.out.println(true);
  } 
  if (pair instanceof Pair) {         //true
  System.out.println(true);
  }
</code></pre></li>
<li><p>同样，getClass()方法返回的是原始类型。</p>

<pre><code>  Pair&lt;String&gt; pair=new Pair&lt;String&gt;();
  Pair&lt;Double&gt; pair2=new Pair&lt;Double&gt;();
  if (pair.getClass()==pair2.getClass()) {
  System.out.println(true);
  }         //输出为true
</code></pre></li>
</ul>


<h5>* 不能创建泛型数组</h5>

<pre><code>Pair&lt;String&gt;[] pairs=new Pair&lt;String&gt;[10];  //error
</code></pre>

<ul>
<li>只是不能创建这些数组，但是声明类型Pair<String>[] 的变量仍是合法的，只能不过不能初始化。</li>
<li>原因也是类型擦除。</li>
</ul>


<h5>* 不能实例化类型变量</h5>

<ul>
<li>即不能使用new T(&hellip;),new T[&hellip;],或T.class这样的表达式中的类型变量。

<h5>* 不能创建类型变量数组</h5>

  private T[] ts=new T[2];   //error

<h5>* 不能在静态域或静态方法中引用类型变量</h5>

  private static T t;   //error
  public static T print(){}   //error
</br>

<h3>* 泛型类型的继承规则</h3></li>
<li>考虑一个类与一个子类，如Object,String，那么Pair<String>是Pair<Object>的子类吗？不是</li>
<li>无论T和V有什么关系，通常Pair<V>,Pair<T>是没有任何关系的。
Pair<Object>[] pair3=new Pair<String>[10];  //error</li>
<li>注意泛型与Java数组之间的区别：可以将子类数组的变量赋给父类数组变量。
Object[] objects=new String[10];</li>
<li>永远可以将参数化类型转换为一个原始类型。
Pair pair3=new Pair<String>();</li>
<li>泛型类可以扩展或者实现其他泛型类，这点而言与普通类没有区别</li>
<li>ArrayList<T>类实现了List<T>接口。</li>
<li>意味着ArrayList<String>可以转换为List<String></li>
</ul>


<h3>* 通配符类型</h3>

<ul>
<li>通配符类型中，允许类型参数变化。如  Pair&lt;? extends Comparable></li>
<li><p>类型Pair<String>是Pair&lt;? extends Object>的子类型。                                                                                        &lt;&mdash;Pair<Object>
Pair(原始类型)&lt;&mdash;Pair&lt;? extends Object><---
                  <---Pair<String></p></li>
<li><p>通配符的超类型限定</p></li>
<li>可以指定一个父类型：  ? super Manager</li>
<li>带有超类型限定的通配符可以向泛型对象写入，带有子类型限定的通配符可以从泛型对象读取。(P332)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程与并发]]></title>
    <link href="http://ttazk.github.io/blog/2017/03/22/thread/"/>
    <updated>2017-03-22T13:33:24+08:00</updated>
    <id>http://ttazk.github.io/blog/2017/03/22/thread</id>
    <content type="html"><![CDATA[<pre><code>public class Thread  extends Object  implements Runnable

线程 是程序中的执行线程。Java 虚拟机允许应用程序并发地运行多个执行线程。

每个线程都有一个优先级，高优先级线程的执行优先于低优先级线程。每个线程都可以或不可以标记为一个守护程序。当某个线程中运行的代码创建一个新 Thread 对象时，该新线程的初始优先级被设定为创建线程的优先级，并且当且仅当创建线程是守护线程时，新线程才是守护程序。

当 Java 虚拟机启动时，通常都会有单个非守护线程（它通常会调用某个指定类的 main 方法）。Java 虚拟机会继续执行线程，直到下列任一情况出现时为止：
    - 调用了 Runtime 类的 exit 方法，并且安全管理器允许退出操作发生。
    - 非守护线程的所有线程都已停止运行，无论是通过从对 run 方法的调用中返回，还是通过抛出一个传播到 run 方法之外的异常。

创建新执行线程有两种方法。一种方法是将类声明为 Thread 的子类。该子类应重写 Thread 类的 run 方法。这种方法不再推荐。
创建线程的另一种方法是声明实现 Runnable 接口的类。该类然后实现 run 方法。然后可以分配该类的实例，在创建 Thread 时作为一个参数来传递并启动
</code></pre>

<ul>
<li>在一个单独线程中执行一个任务的步骤如下：

<ul>
<li>将任务代码移到实现了Runnable接口类的run()方法中。</li>
<li>由Runnable对象创建一个Thread对象。Thread thread=new Thread(new Runnable());</li>
<li>启动线程。thread.start().<br/><br/></li>
</ul>
</li>
</ul>


<!--  more -->


<ul>
<li><p>Runnable接口有唯一的方法run(),用于定义将要执行的任务。</p>

<ul>
<li>Thread类实现了Runnable接口，有run(),start()方法，具体如下：

<pre><code>  - Thread(Runnable target)
    构造一个新的线程，用于调用给定目标的run()方法。

  - public void start()
  启动这个线程，将引发调用run()方法。这个方法立即返回，并且新线程将并发运行。
  使该线程开始执行；Java 虚拟机调用该线程的 run 方法。
  结果是两个线程并发地运行；当前线程（从调用返回给 start 方法）和另一个线程（执行其 run 方法）。
  多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。

  - public void run()
  调用关联的Runnable的run()方法。
  如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回

      * 即当调用Thread.start()方法时，会启动一个新的线程，并执行Runnable对象的run()方法。
      * start()方法会立即返回，但是run()方法会继续执行。所以会出现多个线程同时在运行，当run方法运行结束时，线程终止。      ps:main()线程是主线程
      * 不要调用Thread类或Runable对象的run()方法。直接调用run()方法，只会执行同一个线程中的任务，而不会启动新的线程。应该调用Thread.start方法。这个方法将创建一个执行run方法的新线程。


  public void interrupt()
  向线程发送中断请求。线程的中断状态被设置为true。如果目前线程被一个sleep调用阻塞，那么会抛出InterruptedException。

  public static boolean interrupted()
  测试当前线程是否已经中断。线程的中断状态 由该方法清除，会将当前线程的中断状态重置为false。换句话说，如果连续两次调用该方法，则第二次调用将返回 false（在第一次调用已清除了其中断状态之后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）。

  public boolean isInterrupted()
  测试线程是否已经中断。线程的中断状态 不受该方法的影响。
</code></pre></li>
</ul>
</li>
<li><p>没有可以强制线程终止的方法，interrupt方法用来请求终止线程。当调用interrupt方法时，线程的中断状态被置位。没有要求一个被中断的线程应该终止。中断一个线程只不过是引起它的注意，被中断的线程可以决定如何响应。可以不理会中断，但是大部分线程是将中断作为一个终止的请求，被中断的线程会在安全的时候终止。实际上，运行中的线程被中断，目的是为了让其他线程获得运行的机会。</p></li>
</ul>


<h3>线程状态：</h3>

<ul>
<li>New(新创建)：使用new操作符创建新的线程</li>
<li>Runnable(可运行)：一旦调用start方法，线程便处于可运行状态。一个可运行的线程可能在运行，也可能没有运行。</li>
<li><p>Bolcked(被阻塞)，Waiting(等待)：此时线程暂时不活动。</p>

<ul>
<li>当线程试图获取一个内部的对象锁时，而该锁被其他线程所持有，则该线程进入阻塞状态。</li>
<li>当一个线程等待另个线程通知调度器一个条件时，它自己进入等待状态。</li>
<li>有几个方法有一个超时参数。调用它们导致进入计时等待。thread.sleep、thread.join、thread.wait，condition.await。</li>
</ul>
</li>
<li><p>Terminated(被终止)：因为run方法正常退出而终止/因为一个没有捕获异常而终止。</p>

<pre><code>  public final void join()             
  等待该线程终止。
  public final void join(long millis)               
  等待该线程终止的时间最长为 millis 毫秒。超时为 0 意味着要一直等下去
  public static void sleep(long millis)                
  在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。该线程不丢失任何监视器的所属权。
  public static void yield()
  暂停当前正在执行的线程对象，并执行其他线程。
</code></pre></li>
</ul>


<h3>线程同步</h3>

<ul>
<li>有两种方法可以防止代码受并发访问的干扰：1.使用synchronized关键字；2.jdk1.5引入了ReentrantLock类，实现了锁机制。</li>
<li><p>ReentrantLock类保护代码的基本结构如下：</p>

<pre><code>  ReentrantLock myLock=new ReentrantLock():
  myLock.lock()://获得锁
  try{
       临界区资源，存放着共同访问的资源
  }
  fianlly{
       myLock.unlock();//释放锁
  }
</code></pre>

<ul>
<li>这一结构确保了任何时刻只有一个线程进入临界区。一旦一个线程封锁了锁对象，其他任何线程都无法通过lock语句。当其他线程调用lock时，它们被阻塞，直到第一个线程释放锁对象。注意，要把解锁操作放在fianlly子句中。如果两个线程试图访问同一个锁对象，那么锁以串行的方式提供服务；如果两个线程访问的是不同的锁对象，那么两个线程都不会阻塞。所以，如果想要使线程同步，必须是同一个锁对象。</li>
<li><p>锁是可重入的，因为线程可以重复获得已经持有的锁。锁保持一个持有计数来跟踪lock方法的嵌套调用。线程每次调用一次lock,都要调用一次unlock释放锁。被一个锁保护的代码可以调用另一个使用相同锁的方法。<br/>
Lock:</p>

<pre><code>    public interface Lock
    Lock 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作。

    void lock()
    获取锁。如果锁不可用，出于线程调度目的，将禁用当前线程，并且在获得锁之前，该线程将一直处于休眠状态

    void unlock()
    释放锁

    Condition newCondition()
    返回绑定到此 Lock 实例的新 Condition 实例。
    在等待条件前，锁必须由当前线程保持。调用 Condition.await() 将在等待前以原子方式释放锁，并在等待返回前重新获取锁。

    boolean tryLock()
    仅在调用时锁为空闲状态才获取该锁。尝试获取锁而不会发生阻塞。
    如果锁可用，则获取锁，并立即返回值 true。如果锁不可用，则此方法将立即返回值 false。
    此方法的典型使用语句如下：
          Lock lock = ...;
          if (lock.tryLock()) {
              try {
                  // manipulate protected state
              } finally {
                  lock.unlock();
              }
          } else {
              // perform alternative actions
          }

    此用法可确保如果获取了锁，则会释放锁，如果未获取锁，则不会试图将其释放。
</code></pre>

<p>ReentrantLock:</p>

<pre><code>    public class ReentrantLock extends Object implements Lock, Serializable

    一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。

    除了ReentrantLock，还有一种锁，ReentrantReadWriteLock(读/写锁)，使用该锁的步骤：

        1. 
            1. 
                1. 构造 一个ReentrantReadWriteLock对象：private ReentrantReadWriteLock rwl=new ReentrantReadWriteLock();
                2. 抽取读锁与写锁：Lock read=rwl.readLock();  Lock write=rwl.writeLock();
                3. 对所有的获取方法加读锁，对所有的修改方法加写锁。




    Lock readLock();得到一个可以被多个读操作共用的读锁，但会排斥所有的写锁
    Lock writeLock();得到一个写锁，排斥其他的读操作与写操作。



        * 条件对象
        * 如果一个线程获得锁，进入临界区，但是该线程因为自身条件不足无法继续执行。可以使用条件对象使自己阻塞，并放弃锁，从而将机会让给别的线程。
        * 一个锁对象可以有多个条件对象。可以使用newCondition()方法获得一个条件对象。
</code></pre>

<p>Condition:</p>

<pre><code>    public interface Condition
    Condition 实例实质上被绑定到一个锁上。要为特定 Lock 实例获得 Condition 实例，请使用其 newCondition() 方法。
    void await()
    将该线程放到条件的等待集中。
    void signalAll()
    解除该条件的等待集中所有线程的阻塞状态。
    void signal()
    从该条件的等待集中随机地选择一个线程，解除其阻塞状态。

        * 当条件对象调用await()时，线程被阻塞，并放弃锁。
        * 等待获得锁的线程与调用await()方法的线程本质上不同。一旦一个线程调用await()方法，它进入该条件的等待集中。当锁可用时，该线程不能马上解除阻塞，相反，它处于阻塞状态，直到另一个线程调用同一个条件上的siagnalAll方法时为止。当线程从等待集中移出时，它们再次成为可运行的。一旦锁成为可用的，它们中的某个将从await()调用返回，获得该锁，并从被阻塞的地方继续执行。
        * 当一个线程调用await()方法时，它是没法自己激活自己，只能等待其他线程激活。如果没有线程来激活，就会出现死锁。
        * 当一个线程拥有某个条件的锁时，它仅仅可以在该条件上调用await().signalAll()。
</code></pre></li>
</ul>
</li>
</ul>


<h3>synchronized关键字</h3>

<ul>
<li>Java中的每个对象都有一个内部锁。如果一个方法使用synchonized关键字声明，那么对象的锁将保护整个方法。也就是说，调用该方法，线程必须获得内部的对象锁。调用synchonized方法时获取锁，方法返回时释放锁。</li>
<li>内部对象只有一个相关条件。wait方法添加一个线程到等待集中，notifyAll/notify方法解除等待线程的阻塞状态。wait(),notifyAll(),notify()方法是Object类的final方法，await(),signalAll(),signal()方法是Condition类的方法。两者等价。</li>
<li>每个对象有一个内部锁，该锁有一个内部条件。</li>
<li><p>将静态方法声明为synchonized也是可以的。</p>

<pre><code>  class Print implements Runnable{

      @Override
      public synchronized void run() {
           // TODO Auto-generated method stub
           for (int i = 0; i &lt;30; i++) {
               System.out.print(i+" ");
           }
           System.out.println();
      }

  }
  public class SynchonizedTest {
      public static void main(String[] args) {
           Print print=new Print();
           for (int i = 0; i &lt; 5; i++) {
               Thread thread=new Thread(print);
               thread.start();
           }
      }
  }
</code></pre></li>
<li><p>同步阻塞：</p>

<ul>
<li><p>如上所述，每个Java对象都有一个内部锁。线程可以通过调用synchonized声明的同步方法来获取这个锁。还有一个机制可以获得内部锁，通过进入一个同步阻塞。当线程进入如下形式的阻塞：</p>

<pre><code>  Object obj=new Object();
  synchonized(obj){
       临界区
  }
</code></pre>

<ul>
<li>该线程就获得obj的内部锁。在此，obj对象被创建仅仅是用来使用使用每个Java对象持有的锁。</li>
<li>这种通过使用一个对象的锁来实现额外的原子操作，实际上被称为客户端锁定。</li>
</ul>
</li>
</ul>
</li>
<li><p>Volatile关键字</p>

<ul>
<li> 原子性可以应用于除double,long之外的基本类型上的简单操作（读取，写入）。</li>
<li><p>volatile关键字为实例域的同步访问提供了一种免锁机制。可以使得多线程安全地读取一个域。但是Volatile关键字不能提供原子性。</p>

<pre><code>  private volatile int i;
  pbulic void change(){ i=i++};//i++分为两个步骤，不一定能保证原子性
</code></pre></li>
<li><p>如果将一个域声明为volatile的，那么只要对这个域产生了写操作，那么所有的读操作都可以看到这个修改。因为volatile域会立即被写入到主存中，读操作就发生在主存中。</p></li>
</ul>
</li>
<li><p>原子性：</p>

<ul>
<li>如果对共享变量除了赋值之外并不完成其他操作，那么可以将这些共享变量声明为volatile.</li>
<li><p>java.util.concurrent.atomic包中有很多类来保证其他操作的原子性。AtomicInterge,AtomicLong等类。</p>

<pre><code>  public final long incrementAndGet()
  以原子方式将当前值加 1。

  public final long decrementAndGet()
  以原子方式将当前值减 1。

  public final long getAndAdd(long delta)
  以原子方式将给定值添加到当前值。

  public final long getAndSet(long newValue)
  以原子方式设置为给定值，并返回旧值。

  public final boolean compareAndSet(long expect,
                                    long update)
  如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。
</code></pre></li>
</ul>
</li>
</ul>


<h3>ThreadLocal：</h3>

<ul>
<li>防止共享资源产生冲突的另种方法是根除对变量的共享。线程本地存储可以为使用相同变量的每个不同线程创建不同的存储，即ThreadLocal辅助类为各个线程提供各自的实例。因此，如果你有5个线程都要使用变量x，那么本地线程存储就会生成5个用于x的不同的存储块。主要是，它们可以使你将线程与状态关联起来。</li>
<li>ThreadLocal对象通常当做静态域存储，在创建ThreadLocal时，你只能通过get(),set()方法来访问对象的内容，其中，set()会将参数插入到为其线程存储的对象中，并返回存储中原有的对象。get()方法将返回其与线程相关的对象的副本。</li>
<li>ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单：在ThreadLocal类中有一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值对应线程的变量副本。</li>
<li><p>ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</p>

<pre><code>      public class ThreadLocal&lt;T&gt; extends Object
      该类提供了线程局部 (thread-local) 变量。这些变量不同于它们的普通对应物，因为访问某个变量（通过其 get 或 set 方法）的每个线程都有自己的局部变量，它独立于变量的初始化副本。ThreadLocal 实例通常是类中的 private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。     

      例如，以下类生成对每个线程唯一的局部标识符。线程 ID 是在第一次调用 UniqueThreadIdGenerator.getCurrentThreadId() 时分配的，在后续调用中不会更改。

      import java.util.concurrent.atomic.AtomicInteger;
      public class UniqueThreadIdGenerator {
          private static final AtomicInteger uniqueId = new AtomicInteger(0);
          private static final ThreadLocal &lt; Integer &gt; uniqueNum =
              new ThreadLocal &lt; Integer &gt; () {
                  @Override protected Integer initialValue() {
                      return uniqueId.getAndIncrement();
              }
          };
          public static int getCurrentThreadId() {
              return uniqueId.get();
          }
      } // UniqueThreadIdGenerator
      每个线程都保持对其线程局部变量副本的隐式引用，只要线程是活动的并且 ThreadLocal 实例是可访问的；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收（除非存在对这些副本的其他引用

      public ThreadLocal()
      创建一个线程本地变量。

      protected T initialValue()
      返回此线程局部变量的当前线程的“初始值”。线程第一次使用 get() 方法访问变量时将调用此方法，但如果线程之前调用了 set(T) 方法，则不会对该线程再调用 initialValue 方法。通常，此方法对每个线程最多调用一次，但如果在调用 get() 后又调用了 remove()，则可能再次调用此方法。

      public T get()
      返回此线程局部变量的当前线程副本中的值。如果变量没有用于当前线程的值，则先将其初始化为调用 initialValue() 方法返回的值。

      public void set(T value)将此线程局部变量的当前线程副本中的值设置为指定值。大部分子类不需要重写此方法，它们只依靠 initialValue() 方法来设置线程局部变量的值。

      public void remove()
      移除此线程局部变量当前线程的值。如果此线程局部变量随后被当前线程读取，且这期间当前线程没有设置其值，则将调用其 initialValue() 方法重新初始化其值。这将导致在当前线程多次调用 initialValue 方法。
</code></pre></li>
</ul>


<h3>阻塞队列：</h3>

<ul>
<li>阻塞队里与普通的队列的区别在于，普通队列不会对当前线程产生阻塞，在面对类似消费者-生产者模型时，就必须额外的实现同步策略以及线程间唤醒策略。使用阻塞队列，就会对当前线程产生阻塞，当队列是空时，从队列中获取元素的操作将会被阻塞，当队列是满时，往队列里添加元素的操作也会被阻塞。</li>
<li>在协调多个线程之间的合作时，阻塞队列是一种有用的工具。工作者线程可以周期性地将中间结果存储在阻塞队列中，其他的工作者线程移出中间结果并进一步修改。队列会自动地负载均衡。</li>
<li>使用阻塞队列不需要显式地声明线程的同步。</li>
<li><p>当试图向队列添加元素而队列已满，或者想从队列移除元素而队列为空时，阻塞队列会导致线程阻塞。如果第一个线程集运行的比第二个慢，第二个线程集会在等待结果时阻塞；如果第一个线程集运行的快，它会等待第二个线程集赶上来。</p>

<pre><code>  public interface BlockingQueue&lt;E&gt; extends Queue&lt;E&gt;
  BlockingQueue 实现主要用于生产者-使用者队列，但它另外还支持 Collection 接口。因此，举例来说，使用 remove(x) 从队列中移除任意一个元素是有可能的。然而，这种操作通常不 会有效执行，只能有计划地偶尔使用，比如在取消排队信息时。
  BlockingQueue 实现是线程安全的。所有排队方法都可以使用内部锁或其他形式的并发控制来自动达到它们的目的。然而，大量的 Collection 操作（addAll、containsAll、retainAll 和 removeAll）没有 必要自动执行，除非在实现中特别说明。因此，举例来说，在只添加了 c 中的一些元素后，addAll(c) 有可能失败（抛出一个异常）。
  以下是基于典型的生产者-使用者场景的一个用例。注意，BlockingQueue 可以安全地与多个生产者和多个使用者一起使用。

  class Producer implements Runnable {
    private final BlockingQueue queue;
    Producer(BlockingQueue q) { queue = q; }
    public void run() {
      try {
        while(true) { queue.put(produce()); }
      } catch (InterruptedException ex) { ... handle ...}
    }
    Object produce() { ... }
  }

  class Consumer implements Runnable {
    private final BlockingQueue queue;
    Consumer(BlockingQueue q) { queue = q; }
    public void run() {
      try {
        while(true) { consume(queue.take()); }
      } catch (InterruptedException ex) { ... handle ...}
    }
    void consume(Object x) { ... }
  }

  class Setup {
    void main() {
      BlockingQueue q = new SomeQueueImplementation();
      Producer p = new Producer(q);
      Consumer c1 = new Consumer(q);
      Consumer c2 = new Consumer(q);
      new Thread(p).start();
      new Thread(c1).start();
      new Thread(c2).start();
    }
  }
</code></pre></li>
<li><p>常用阻塞队列的方法：</p></li>
</ul>


<p>抛出异常 特殊值 阻塞 超时 插入
add(E e)
offer(E e)
put(E e)
offer(e,time,unit)
移除
remove()
poll()
take()
poll(time,unit)
检查
element()
peek()</p>

<ul>
<li><p>阻塞队列的实现类：</p>

<ul>
<li>ArrayBlockingQueue<E>(int capacity):带指定容量的阻塞队列，用循环数组实现</li>
<li>LinkedBlockingQueue<E>():无上限的阻塞队列，用链表实现</li>
<li>LinkedBlockingDeque<E>():无上限的双向队列，用链表实现</li>
<li>PriorityBlockingQueue<E>():无边界的阻塞队列，用堆实现。</li>
</ul>
</li>
<li><p>线程安全的集合：</p>

<ul>
<li>public class ConcurrentSkipListSet<E> extends AbstractSet<E></li>
<li>public class ConcurrentLinkedQueue<E> extends AbstractQueue<E></li>
<li>public class ConcurrentSkipListMap&lt;K,V> extends AbstractMap&lt;K,V></li>
<li><p>public class ConcurrentHashMap&lt;K,V> extends AbstractMap&lt;K,V></p>

<pre><code>  public class CopyOnWriteArrayList&lt;E&gt;  extends Object
  implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable
  ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。
  public class CopyOnWriteArraySet&lt;E&gt;  extends AbstractSet&lt;E&gt;
  implements Serializable
  对其所有操作使用内部 CopyOnWriteArrayList 的 Set。
</code></pre></li>
</ul>
</li>
<li><p>在Java的初始版本中，Vector与HashTable类就提供了线程安全的动态数组与散列表的实现。现在这些类都弃用了，取而代之的是ArrayList与HashMap，而这些类不是线程安全的。不过任何集合类都可以使用同步包装器变成线程安全的。</p></li>
<li><p>Collections:</p>

<pre><code>  public static &lt;T&gt; Collection&lt;T&gt; synchronizedCollection(Collection&lt;T&gt; c)
  返回指定 collection 支持的同步（线程安全的）collection。为了保证按顺序访问，必须通过返回的 collection 完成所有对底层实现 collection 的访问

  public static &lt;T&gt; Set&lt;T&gt; synchronizedSet(Set&lt;T&gt; s)
  返回指定 set 支持的同步（线程安全的）set。为了保证按顺序访问，必须通过返回的 set 完成对所有底层实现 set 的访问。

  public static &lt;T&gt; List&lt;T&gt; synchronizedList(List&lt;T&gt; list)
  返回指定列表支持的同步（线程安全的）列表。为了保证按顺序访问，必须通过返回的列表完成所有对底层实现列表的访问。

  public static &lt;K,V&gt; Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m)
  返回由指定映射支持的同步（线程安全的）映射。为了保证按顺序访问，必须通过返回的映射完成所有对底层实现映射的访问。
</code></pre></li>
<li><p>返回集合的方法都使用锁加以保护，提供了线程安全访问。</p></li>
<li>不过最好使用java.util.concurrent包中定义的集合，而不是同步包装器中的。</li>
<li>如果一个线程处于了阻塞状态（如线程调用了thread.sleep、thread.join、thread.wait、1.5中的condition.await、以及可中断的通道上的 I/O 操作方法后可进入阻塞状态），则在线程在检查中断标识时如果发现中断标示为true（即线程在此时调用interrupt()方法），则会在这些阻塞方法（sleep、join、wait、1.5中的condition.await及可中断的通道上的 I/O 操作方法）调用处抛出InterruptedException异常，并且在抛出异常后立即将线程的中断标别位清除，即重新设置为false。抛出异常是为了线程从阻塞状态醒过来，并在结束线程前让程序员有足够的时间来处理中断请求。</li>
</ul>

]]></content>
  </entry>
  
</feed>
